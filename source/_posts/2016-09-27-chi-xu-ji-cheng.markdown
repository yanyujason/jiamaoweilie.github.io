---
layout: post
title: "持续集成之我见（一）"
date: 2016-09-27 22:12:38 +0800
comments: true
categories: ci
---
##什么是持续集成
[持续集成（Continuous integration）][1]是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。
##为什么要持续集成
在我刚到上一个项目时，团队成员工作在下面一种工作模式中。项目代码在开发人员的本地，一个人负责一个或多个小项目。需求分析人员写好需求文档，然后和开发人员、测试人员一起开一个需求评审会，然后开发人员开始写代码，测试人员开始写测试文档。当开发完成需求后，手动的完成代码打包，然后手动部署到SIT环境供测试人员进行测试。部署完成后，测试人员就开始了疯狂的寻找bug之旅，将bug录入系统并交给开发去改，周而复始，完成上面的往复。直至此环境的测试工作完成，然后开发人员又去手动部署到UAT环境，依旧完成上次的循环，直至项目发布。在项目发布之前还会将代码拷贝给其他部门进行代码规范、安全等审查，在针对审查出来的问题进行改正，往往这个改动又会引入其他问题。

这种系统，采用传统的模式开发，在代码开发完成后才集成起来进行测试，很多在项目早期就存在的bug都是在完成开发工作之后才被发现，不利于定位问题，增加工作难度，而且每次部署都是手动的，有的环境甚至有几十台机器需要部署，单单打包部署这种重复劳动就使开发人员的工作苦不堪言。开发从来不写单元测试，甚至也不怎么认真进行自测，完成代码就交给测试去测，甚至还会发现将输入页面的用户名和密码的输入框写反了这种低级错误，而且项目一旦出现问题就是为什么测试人员没有测出来这个bug，我甚至遇到过因为项目出了线上bug而将测试人员开除的情况，这使得测试人员的工作也是压力山大。

在这种困境之下徘徊很久，项目组引入持续集成的概念，使用git作为版本控制工具，使用gradle作为构建工具，使用Jenkins搭建ci，增加自动化的代码编译、审查、单元测试、集成测试，以及自动化部署等。从艰难推行，到客服困难运行了一段时间之后，发现持续集成给项目带来了很多好处。

###减少重复过程
在以前的工作模式中，代码的编译、审查、测试、打包、部署、反馈等工作，都是手动进行，费时费力，而且容易出错。通过自动化的持续集成可以将这些重复的动作都变成自动化的，无需太多人工干预，减少重复的过程，可以节省时间、费用和工作量，让人们的时间更多的投入到动脑筋的、更高价值的事情上。

###减少风险
在一个项目中，最不可靠最容易出错的因素就是人，减少大量重复的人力工作就大大的降低了项目的风险。另外，一天中进行多次的集成，并做了相应的自动化测试，这样有利于检查缺陷，了解软件的健康状况，减少假定。利用持续集成，开发人员对源代码进行的小改动，会及时和其他的代码进行集成，一旦出现问题，项目成员马上就会被通知到，问题也会在第一时间被修复。

###任何时间、任何地点生成可部署的软件
开发提交代码之后，只有构建成功，就会生成一个在任何时间可部署的软件产品，可恐怕是对用户来说最显而易见的好处。不采用持续集成的情况下，项目中的问题有可能到交付前的集成测试的时候才发现，有可能会导致延迟发布产品，而在急于修复这些缺陷的时候又有可能引入新的缺陷，最终可能导致项目失败。

###增强项目的可见性
持续集成可以带来两点积极效果：

* 有效决策：持续集成系统为项目构建状态和品质指标提供了及时的信息，有些持续集成系统可以报告功能完成度和缺陷率。
* 注意到趋势：由于经常集成，我们可以看到一些趋势，如构建成功或失败、总体品质以及其它的项目信息。

如果没有真实或最新的数据提供支持，项目就会遇到麻烦，每个人都会提出他最好的猜测。通常，项目成员通过手工收集这些信息，增加了负担，也很耗时。

###建立团队对开发产品的信心
采用持续集成，团队成员可以清楚的知道每一次构建的结果，看到自己对软件的改动造成了哪些影响，结果怎么样，这种即时、可视化的信息可以增加了团队的信心。

##如何做到持续集成

根据上文的描述，我们使用的持续集成工具需要做到下面几个功能：

* 自动构建：构建工作需要在提交代码之后自动执行，要求无人值守，如果人工来操作，那么持续集成就毫无魅力。
* 发现版本库的变更：通过轮询或者定时，触发持续集成工具发现版本库的变更。
* 反馈机制：在出现问题时，能及时的把问题反馈给正确的人（提交者、测试者、管理者）
* 回滚：在出现问题后，拥有回滚到可交付的能力。
* 纯净的构建环境：每一次都应该把之前的环境删除干净，让每一次构建都是一个新的构建。
* 完善的集成功能：代码的测试，审查，部署都应该做到完善。如果单纯的利用它做持续的编译，那就是大材小用了。

使用持续集成工具搭建构建流水线仅仅是第一步，全组成员依照默认的纪律使用ci才能使其最大化发生作用。一个开始准备要提交新修改的代码时，应该遵循如下步骤：

1. 查看ci是否正在构建。如果有的话，你要等它运行完。如果构建失败了，你要与团队成员一起将其修复。
2. 一旦构建完成且测试全部通过，就从版本控制库中更新最新的代码到本地。
3. 在本地执行构建脚本，运行测试，以确保代码在本地可以正常工作。
4. 如果本地构建成功，就将代码提交到远端代码库。
5. 等待这次提交的构建结果。
6. 如果构建失败，就应该停下来手头的工作，修复构建问题，然后转到步骤3。
7. 如果构建成功，你就可以happy的进行接下来的工作了。

至此，我们对持续集成已经有了一个简单的认识，在接下来的文章中，我将会介绍一些持续集成工具，以及如何使用这些工具。

  [1]: http://baike.baidu.com/view/5253255.html