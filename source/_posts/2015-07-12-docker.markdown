---
layout: post
title: "使用Docker构建工作环境"
date: 2015-07-12 23:38:26 +0800
comments: true
categories: 
---

###Docker简介

[Docker](https://www.docker.com/)是一个开源项目，诞生于2013年初，最初是dotCloud公司内部的一个业余项目。它基于Google公司推出的Go语言实现。项目后来加入了Linux基金会，遵从了Apache 2.0协议，项目代码在GitHub上进行维护。

Docker自开源后受到广泛的关注和讨论，以至于 dotCloud公司后来都改名为 DockerInc。Redhat已经在其RHEL6.5中集中支持Docker Google也在其 PaaS产品中广泛应用。

Docker项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker的基础是 Linux 容器（LXC）等技术。

在LXC的基础上，Docker进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作Docker的容器就像操作一个快速轻量级的虚拟机一样简单。

###基本概念

Docker包括三个基本概念：

* 镜像（Image）
* 容器（Container）
* 仓库（Repository）

####Docker Image

Image是一个只读的模板，可以用来创建Docker Container。一个镜像可以包含一个完整的ubuntu操作系统环境，里面仅安装了Nginx或用户需要的其它应用程序。Docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。

####Docker Container

Docker利用container来运行应用。它就是从image创建的运行实例，可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。

####Docker Repository

Repository是集中存放镜像文件的地方，分为public和private两种形式。

最大的公开repository是[Docker Hub](https://hub.docker.com/)，存放了数量庞大的镜像供用户下载。国内的公开repository包括[Docker Pool](http://www.dockerpool.com/)等，可以提供大陆用户更稳定快速的访问。

当然，用户也可以在本地网络内创建一个私有repository。用户创建了自己的image之后就可以使用`push`命令将它上传到公有或者私有repository，这样下次在另外一台机器上使用这个image时候，只需要从仓库上 `pull`下来就可以。

###获取和使用Image

获取镜像的方式有很多种，用户可以直接从repository上`pull`已有的image，也可以自己创造一个image。这里着重介绍如何创造一个Docker image。

使用`docker build`创建一个新的镜像，需要首先创建一个Dokcerfile，其中包含一些创建镜像的指令。Dockerfile中的每一条指令创建镜像的一层。例如：

```
# This is a comment
FROM ubuntu:14.04

MAINTAINER wei 20150629

RUN apt-get update && \
    apt-get install -y nginx && \
    rm -rf /var/lib/apt/lists/* && \
    echo "\ndaemon off;" >> /etc/nginx/nginx.conf && \
    chown -R www-data:www-data /var/lib/nginx

VOLUME ["/etc/nginx/sites-enabled", "/etc/nginx/certs", "/etc/nginx/conf.d", "/var/log/nginx", "/var/www/html"]

WORKDIR /etc/nginx

CMD /usr/sbin/nginx

EXPOSE 80 
```

Dockerfile 基本的语法是:

* 使用#来注释
* FROM 指令告诉 Docker 使用哪个镜像作为基础
* 接着是维护者的信息
* RUN开头的指令会在创建中运行，比如安装一个软件包，在这里使用`apt-get
`安装了nginx
* ADD 命令复制本地文件到镜像
* VOLUME 命令创建一个挂载点用于共享目录
* EXPOSE 命令来向外部开放端口
* WORKDIR 命令设置当前工作路径 
* CMD 命令来描述容器启动后运行的程序，比如上例用来启动nginx

完成Dockerfile之后，使用`docker build`命令来生成镜像：

```
docker build -t docker-nginx .
```
这条命令表示，`build`当前路径下的Dockerfile， `-t`标记来添加tag，指定新的image的信息。

![](/images/img_for_docker/build.png)

从上图中可以看到build进程的执行过程。首先，它会上传Dockerfile的内容，因为所有的操作都依据这个Dockerfile进行。然后，逐条执行Dockerfile里面定义的任务。每一步都创建了一个新的容器，在容器中执行指令并提交修改。当所有的指令都执行完毕之后，返回了最终的镜像 id。所有的中间步骤所产生的容器都被删除和清理了。

使用`docker images`可以查看当前的所有image，或者对image进行其他操作，比如删除：

```
docker rmi docker-nginx
```

成功创建docker image之后，就是创建执行它的容器了。

###Container的使用

启动container有两种方式，一种是基于image新建一个容器并启动，另外一个是将在终止状态（stopped）的container重新启动。因为Docker的container特别轻量级，用户可以随时删除和新创建容器。

创建并使用container的主要命令是`docker run`, 例如：

```
docker run -d -p 80:80 docker-nginx
```
![](/images/img_for_docker/run.png)
`run`命令执行该image，生成一个容器，`-d`表示后台运行，并打印出该image的id。-p 80:80，表示将80端口暴露出来。

我们可以使用`exec`命令进入执行该image的容器：

```
docker exec -it docker-nginx bash
```

使用`docker pa -a`查看当前所有container的状态：

![](/images/img_for_docker/con.png)

或者使用`docker stop`来停止一个容器，使用`docker rm`来删除一个容器。

另外，我们还可以将自己创造的docker image push到远程或者本地的repository中，以方便后续使用。这样我们就可以利用docker，方便的定制自己需要的工作环境，并且能够轻松的移植到任何一台机器上。更多关于docker的操作请参见其[官方文档](http://docs.docker.com/mac/started/)。





