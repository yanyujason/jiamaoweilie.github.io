<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | 三胖的窝]]></title>
  <link href="http://jiamaoweilie.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://jiamaoweilie.github.io/"/>
  <updated>2017-03-09T22:49:48+08:00</updated>
  <id>http://jiamaoweilie.github.io/</id>
  <author>
    <name><![CDATA[贾三胖]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何Mock静态方法]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2015/01/07/mockjing-tai-fang-fa/"/>
    <updated>2015-01-07T21:06:40+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2015/01/07/mockjing-tai-fang-fa</id>
    <content type="html"><![CDATA[<p>最近为客户一堆没有单元测试的代码补测试时，遇到了一堆奇葩的问题，其中一个是被测函数需要调用另外一个类中的静态方法。今天看几个同事讨论说这种写法不好，但是whatever，谁又能完全在理想状态下生存，现有的系统就是这样，测试总得写的吧。</p>

<p>那么我们的解决方法就是使用PowerMock将这些静态方面mock掉。怎么做的呢，通过下面的小例子说明一下。</p>

<p>假如我们有这样一个类EmployeeService需要测试：</p>

<pre><code class="java">public class EmployeeService {
    public int getEmployeeCount() {
        return Employee.count();
    }
}
</code></pre>

<p>可以看出，这个类中有一个函数<code>getEmployeeCount()</code>，它里面调用了类<code>Employee</code>中的<code>count()</code>函数。需要测试的类是<code>EmployeeService</code>，那么自然不应该调用真实的类<code>Employee</code>。如何mock该类呢，我们可以使用PowerMock。</p>

<p>测试的实现代码如下：</p>

<pre><code>@RunWith(PowerMockRunner.class)
@PrepareForTest(Employee.class)
public class EmployeeServiceTest {

   @Test
   public void shouldReturnTheCountOfEmployeesUsingTheDomainClass() {
      PowerMockito.mockStatic(Employee.class);
      PowerMockito.when(Employee.count()).thenReturn(900);

      EmployeeService employeeService = new EmployeeService();
      assertEquals(900,employeeService.getEmployeeCount());
   }
}
</code></pre>

<p>可以看到，测试代码的顶部使用了两个annotation（<code>@RunWith</code>和<code>@PrepareForTest</code>），在测试实现中使用了<code>PowerMockito</code>。其中<code>@RunWith(PowerMockRunner.class)</code>告诉JUnit使用PowerMockRunner执行该测试。<code>@PrepareForTest(Employee.class)</code>告诉PowerMock类<code>Employee</code>是测试中需要用到的类。当我们需要mock一个final类，或需要mock的类中有final、static、private方法时，需要用到<code>@PrepareForTest</code>。<code>PowerMockito.mockStatic(Employee.class)</code>告诉PowerMock我们需要mock类Employee中所有的静态方法。<code>PowerMockito.when(Employee.count()).thenReturn(900)</code>，很显然，这句话就是告诉PowerMock当执行<code>Employee.count()</code>时，返回900。很显然，我们需要assert的是<code>employeeService.getEmployeeCount()</code>的返回值是不是等于900。至此，该测试就算完成了。</p>

<p>但是，如果<code>EmployeeService</code>中有一个函数需要调用一个返回值为void的静态方面，我们又该如何处理。比如，<code>EmployeeService</code>s中有这样一个方法:</p>

<pre><code>public boolean giveIncrementToAllEmployeesOf(intpercentage) {
   try{
      Employee.giveIncrementOf(percentage);
      return true;
   } catch(Exception e) {
      return false;
   }
}
</code></pre>

<p>其实<code>Employee.giveIncrementOf(percentage)</code>是一个返回值为void的静态方法。</p>

<p>测试代码如下：</p>

<pre><code>@Test
   public void shouldReturnTrueWhenIncrementOf10PercentageIsGivenSuccessfully() {
      PowerMockito.mockStatic(Employee.class);

      PowerMockito.doNothing().when(Employee.class);
      Employee.giveIncrementOf(10);

      EmployeeService employeeService = new EmployeeService();
      assertTrue(employeeService.giveIncrementToAllEmployeesOf(10));
    }

   @Test
   public void shouldReturnFalseWhenIncrementOf10PercentageIsNotGivenSuccessfully() {
      PowerMockito.mockStatic(Employee.class);

      PowerMockito.doThrow(new IllegalStateException()).when(Employee.class);
      Employee.giveIncrementOf(10);

      EmployeeService employeeService = new EmployeeService();
      assertFalse(employeeService.giveIncrementToAllEmployeesOf(10));
   }
}
</code></pre>

<p>可以看到该测试中使用了<code>PowerMockito.doNothing()</code>和<code>PowerMockito.doThrow()</code>。其中<code>PowerMockito.doNothing().when(Employee.class)</code>告诉PowerMock当调类<code>Employee</code>时啥也不要干，而<code>PowerMockito.doThrow(new IllegalStateException()).when(Employee.class)</code>则表示实际调用类Employee时抛一个异常。这样，我们的两个测试就覆盖了<code>giveIncrementToAllEmployeesOf()</code>方法的正常和异常两个方面，测试完成。</p>

<p>另外，如果我们使用<code>PowerMockito.mockStatic(Employee.class)</code>mock了Employee的所有静态方法，但是我们又想在测试中真实的调用某个其中一个方法，那么就可以使用<code>PowerMockito.when(...).thenCallRealMethod()</code>，例如我们想调用count的真实方法，就可以：</p>

<pre><code>PowerMockito.when(Employee.count()).thenCallRealMethod();
</code></pre>

<p>更多关于PowerMock，请参见<a href="https://code.google.com/p/powermock/">官方文档</a>。例子中的详细代码，请参见<a href="https://github.com/jiamaoweilie/MockingStaticMothod">我的github</a>。</p>
]]></content>
  </entry>
  
</feed>
