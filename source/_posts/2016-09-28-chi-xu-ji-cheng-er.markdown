---
layout: post
title: "持续集成之我见（二）"
date: 2016-09-28 10:41:35 +0800
comments: true
categories: ci 
---

##持续集成工具推荐
前面的文章提到了一些关于持续集成的概念，以及持续集成工具应该具有的功能，和团队成员应该遵守的ci纪律，下面我讲介绍几种常用的持续集成的工具。

###Jenkins
[Jenkins](https://jenkins.io/)是一个应用广泛的开源持续集成工具，它提供了数百个插件来支持项目的自动化编译、测试、部署等，使得开发人员可以从繁杂的集成中解脱出来，专注在更加重要的业务逻辑实现上。同时 Jenkins 能实时监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。Jenkins可以很好的支持各种语言（比如：java, c#, php等）的项目构建，也完全兼容ant、maven、gradle等多种第三方构建工具，同时跟svn、git能无缝集成，也支持直接与知名源代码托管网站，比如github、bitbucket直接集成。关于如何使用Jenkins，后续文章会做详细的介绍。

###Travis CI
[Travis CI](https://travis-ci.org/)是一个可以与Github完美集成的开源持续集成工具，当用户登录到Travis CI之后，可以同步的从界面中看到该用户Github账号中的repo，用户可以方便的为这些repo中的代码创建ci。它不需要复杂的界面，允许你通过在源码里面增加一个名为`.travis.yml`的文件来对构建进行配置。

```yml
language: ruby
rvm:
 - 2.2
 - jruby
 - rbx-2
```
上文中的配置文件告诉Travis CI这是一个Ruby项目，将会使用rake构建。接下来的rvm告诉Travis CI，这个项目的测试环境是Ruby 2.2，最新版本的JRuby和Rubinius。用户只需将这个配置文件提交到代码库中就可以触发Travis CI构建项目，并在构建页面来查看项目构建状态。

###Concourse
[Concourse](http://concourse.ci/)是一个开源的持续集成工具，它使用yaml文件来配置pipeline，以及设置其他无需配置的安装。根据其开发团队的说法，它的主要优点是：

* 为pipeline提供明确的、第一级的支持；
* 在容器中运行相互隔离的构建工作；
* 可避免使用雪花型构建服务器；
* 能够方便地访问日志；
* 概念简单。

Concourse的最终目标是以尽可能少的变化部分提供一种具有表达性的系统。它设立了三种核心概念：任务、资源、作业。

* 任务（Task）是执行的基本单元，表现为在一个全新启动的容器中所运行的脚本。容器已经经过了预处理，因此其中包含了一个输入与输出目录，任务脚本可在这些目录中运行。
* 资源（Resource）则表现为版本化资源的抽象位置，例如某个repo。资源也可用于对进入或退出某个管道的外部依赖进行建模，或是表示更抽象的概念，例如时间触发器。资源的变更可被检测、获取、以及发布。不同的资源类型（例如Git、AWS S3或触发器）可用于封装用于管道的各种样板代码，为Concourse的扩展提供了一个可适配的接口。
* 作业（Job）是由资源与任务构成的，通过构建计划实现。作业可由资源的变更所触发，也可以选择手动触发，以实现人工批准流程。

一个作业计划的执行实例被称为一次构建（Build），Concourse中的构建是可重复使用的，因为其中的任务在新的容器中也将重新运行。因此，构建的工作线程不会受到之前运行结果的变更所影响。此外，如果某次构建失败了，也可以通过一个名为Fly的Concourse命令行工具在某个容器中再一次在本地运行，通过这种方式实现更快的开发周期。

###Go

[Go](https://www.go.cd/)是ThoughtWorks开发的一款开源持续集成工具。它采用了Server-Agent模式，Server用来展示和配置pipeline的界面，并存放构建出来的Artifacts；Agent用来执行构建操作，一个Server可以和多个Agent建立连接，Agent支持多个主流的操作系统。

![Server Agent模式](/images/img_for_ci/go_cd.jpg)

每种工具的具体使用方法，请详见各自的文档。