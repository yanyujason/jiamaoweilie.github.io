<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://jiamaoweilie.github.io/atom.xml" rel="self"/>
  <link href="http://jiamaoweilie.github.io/"/>
  <updated>2017-03-07T22:31:52+08:00</updated>
  <id>http://jiamaoweilie.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[彩色建模【译】](http://www.step-10.com/SoftwareDesign/ModellingInColour/index.html)]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2016/10/30/model-in-color/"/>
    <updated>2016-10-30T11:49:46+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2016/10/30/model-in-color</id>
    <content type="html"><![CDATA[<p>使用面向对象语言的（如Java，C#, Objective-C）软件开发人员创建一系列相关的类来开发软件。每个类定义了不同类型的对象，各个对象之间相互合作，提供了软件所需的功能。</p>

<p>根据“单一职责原则”或者“关注点分离”原则，精心设计的类的对象做且只做一件事件。一些类体现了技术领域的概念，例如用户界面、页面、控件、数据库连接、搜索结果、事务、网络连接、服务、消息。另一些类体现了问题域（problem domain）的概念。问题域的关注点是软件的消费者或用户。例如，如果开发一个订单管理系统，我们将定义一些问题域的类来代表消费者、订单和产品。</p>

<p>我们称这些类为业务描述对象或者“真实世界”建模，但是他们有一个更加普遍接受的名称：问题域类（problem domain classes）或者单纯的领域类（domain classes）。</p>

<p>换句话说，问题域类映射的观念、思路和规则是软件开发中剥离了正在使用的具体技术到后留下的东西。它们形成了软件的心脏，是传统面向对象应用中最重要的逻辑层。</p>

<p>在多数基于组件或者面向服务的软件中，问题域类帮助推动业务服务和组件的定义和组织。它们还推动了问题域类用于组件或服务实现的设计。</p>

<p>不管是传统的，基于组件的，或者是面向服务的软件，几乎所有的现代软件架构都需要很多技术类来支持每个问题域类。如图1：</p>

<ul>
<li>用户界面类（User interface classes），通常是传统MVC（Model-View-Controller）和命令模式（Command patterns）的变种，对应软件使用者对问题领域对象的显示和操作。</li>
<li>持久化类（Persistence classes），或者持久化机制（例如Hibernate，ADO.Net Entity Framework，and Core Data）的配置文件，用来处理问题域对象到文件或者关系型数据库的映射、存储、检索。</li>
<li>服务层类和它们的参数提供了其他组件和外部系统通过网络与问题域对象集成和交互的方法。</li>
</ul>


<p><img src="http://www.step-10.com/SoftwareDesign/ModellingInColour/images/PDClass.png" alt="PD Class" /></p>

<p>图1. 一个PD类需要大量技术类的支持</p>

<p>虽然不是所有的问题域类都需要如此多的技术类支持，但是有些重要的问题域类可能需要更多的支持。因为它们出现在多个视图，参与了多个服务，以不同的方式在多个时间点持久化。由于各个问题域类之间的关系和依赖，整个事情将更加复杂，例如销售给客户的产品或者供应商交付的项目。在不考虑任何相关的单元、集成、和系统测试类和脚本的情况下，问题域对象支持类的平均数量可以轻松到达十几个或者更多。</p>

<p>尽管有最佳实践的封装，通过支持类对问题域类的更改经常一波三折。小型重构（例如重命名操作）可以通过现代化的IDE工具自动化实现，例如Eclipse、NetBeans、Visual Studio、和 XCode等。更加重要的更改（例如删除属性，改变一对一关系对一对多，是关系双向）通常仍然需要人工更新和重新测试很多类、配置文件、和运行环境支持等。</p>

<p>虽然许多改变是不可避免的，但是学习那些能够帮助我们尽早识别出更强健的问题域类的模式或策略显然是非常必要的。这正是‘彩色建模（modeling in color）’技术提供的东西，它针对于商业和I.T.产业的组件和系统。</p>

<p>Peter Coad在以前关于面向对象分析、设计模式和策略的工作中创建了‘彩色建模’技术的雏形，并在随后几年做了深入研究和重新定义。1997年，该技术首次用于新加坡的一个Java技术栈的软件开发项目。1999年，Peter Coad，与合著者Eric Lefebvre和Jeff De Luca，在他们出版的书《Java Modeling in Color with UML》中介绍了‘彩色建模’技术。对该技术和相关FDD（Feature-driven development）流程的贡献者还有Phil Bradley、Jon Kern、Mark Mayfield、David North和我。</p>

<p><strong>类建模</strong></p>

<p>彩色建模的模型和策略源于类建模的想法。</p>

<p>在业务系统，不论在什么领域，那些典型的问题域类总会一直出现。举个例子，我们几乎总是能发现一些代表不同类别业务（例如销售、订单、租赁、订票、计划的事件，交付，提交，批准，查询等）的交易或交互的类。然后，我们通常找到塑造了参与这些业务交易或交互的当事人、地点和事务的类，进行购买、销售、订购、批准等的人或者组织。此外，那些被购买、销售、或批准的产品或服务等需要被展示，例如在商店、银行分行、网站等这些事情发生的地方。这些一般类不是特定于某一个域。无论问题域是银行业、保险业、零售业、制造业、人力资源、旅游业、交通运输业，还是什么别的，那些典型的类总是持续出现。不同种类的类是独立于领域的，他们是领域无关的（domain neutral）。</p>

<p>这些类不止出现在商业系统。在工业系统中，我们有类来建模特定类型的事件和时间间隔，例如传感器或开关的状态变化，进行测量的时间段，一件设备性能上升到特定阶段需要的时间等等。它们同样非常典型，当事人、地点、和事务类分别代表了传感器和设备本身、监管设备或问题的处理过程的操作员、以及不同种类设备的地点等等。</p>

<p>一个粗略分类中的所有类之间的相似性可能不够接近，不能被概括为一个有用的超级类或者Java/C#中的接口。然而，他们之间的相似性已经足以帮助指导我们设计中问题域类的选择和定义。在彩色建模中，我们称这些粗略分类叫类原型（class archetypes），术语原型据说代表了比较柔和的模式，因此是比刻板印象更合适的术语。彩色建模识别出四个类原型，并分别为其分配一种颜色。</p>

<p><img src="http://www.step-10.com/SoftwareDesign/ModellingInColour/images/FourClassArchetypesLinkedBare.jpg" alt="FourClassArchetypesLinkedBare" /></p>

<p>图2：彩色建模为问题域定义了四个类原型</p>

<p>四个类原型如图2所示：</p>

<ul>
<li><a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/Moment-Interval.html">时刻/间隔（Moment-Interval）</a>类原型，用于模拟需要处理并跟踪业务和法律原因的事情，或者在某个时刻或者某个时间间隔发生的事情。<a href="http://www.step-10.com/Books/JMCUBook.html">[Coad99]</a></li>
</ul>


<p>MI类原型的例子包括销售、租赁、订单、旅程、飞行、会议、预定、谋杀、传感器读取、报警激活等。</p>

<p>MI类原型是粉红色（淡红色）。它表示我们的软件感兴趣的事件，以及人物、地点、事件之间的交互和业务交易。</p>

<p>换句话说，如果发生，它是粉红色的！粉红色发生！</p>

<ul>
<li><a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/Role.html">角色</a>类原型塑造了一个参与人（人或者组织）、地点或事件的参与方式。<a href="http://www.step-10.com/Books/JMCUBook.html">[Coad99]</a></li>
</ul>


<p>角色类的示例包括申请人、账号持有人、审批人、领航员、收银员、客户、供应商、运营商等。</p>

<p>角色类是淡黄色的。它表示参与到软件（发生的）时刻间隔的人、地点、和事物被识别的方式。角色是我们能够做到和授权的一组责任和义务。当我们希望演绎某种角色的时候，我们通常说我们带了一种或者多种不同的帽子。角色类塑造了这些帽子，并且这些帽子总是黄色的。</p>

<p>我们带黄帽子哦！</p>

<ul>
<li><a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/PartyPlaceThing.htm">PPT（Party, Place, Thing）</a>类原型演绎了某些扮演不同角色的人或者物。<a href="http://www.step-10.com/Books/JMCUBook.html">[Coad99]</a></li>
</ul>


<p>当事人(Party)类的例子是人或者组织。地点类的例子包括办公室、商店、仓库、机场、银行分行等。事物类是那些识别诸如私人汽车、飞机、DVD、书籍、设备等个体物品的类。</p>

<p>PPT类是淡绿色的。如果角色类是可以戴的各式各样的（黄色）帽子，那么PPT类就是戴那些帽子的人。显而易见，人是可以扮演角色的，但是地点也同样可以。一个建筑物可以扮演餐厅的角色，也可以扮演犯罪现场的角色。同样，事物也可以扮演角色，比如在制造过程中的角色，或者在销售过程中的角色。如果你可以与它交谈、被它带到法庭、移动它、踢它，那么这个东西就很可能是一个绿色的PPT类。</p>

<p>帽子是黄色的，但是戴帽子的家伙是绿色的哦！</p>

<ul>
<li><a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/Description.html">描述</a>类原型塑造了一个类条目式（catalog-entry-like）的描述。它是一个一次又一次被应用的值得集合。它还提供对于对其描述的所有事物的集合的行为。<a href="http://www.step-10.com/Books/JMCUBook.html">[Coad99]</a></li>
</ul>


<p>它的例子代表了所有类型的产品描述。蓝色和绿色之间的区别是电影和记录电影的DVD之间的区别。</p>

<p>描述类是淡蓝色的。描述类根据不同的值区分或者标记其他东西，通常这些东西是当事人、地点或者事物对象，偶尔也会有MI类。公司工作的行业是一个描述类对象。展厅中展示的汽车模型是一个描述类对象。亚马逊上销售的图书是一个描述类对象。</p>

<p>类似的，你用来区分这些东西的标签总是蓝色的哦！</p>

<p><strong>典型责任</strong></p>

<p>因为同一类原型基本上塑造相同的事物，他们的对象通常需要记住相同的信息，并执行类似的任务。举个例子，MI类的对象通常记录事物发生的日期和时间，并告诉您是否成功完成。角色类的对象通常需要记住它们已经被授权执行某种角色的某种标识符，比如飞行员的许可证号等。</p>

<p>通过列举大量各个类原型的例子，经过稍微的概括，我们可以为每个类原型创建一个典型操作和属性的粗略清单。列表中的每个属性或者操作都代表了我们为该类原型定义的典型操作或属性（见图3）。</p>

<p><img src="http://www.step-10.com/SoftwareDesign/ModellingInColour/images/FourArchetypesWithContentSideBySide.gif" alt="FourArchetypesWithContentSideBySide" /></p>

<p>图3：四个类原型及其典型属性和操作</p>

<p>很少有某个特定的模型能够列举该类原型所拥有的全部属性或者操作。如果某个特定的典型属性或操作与一个特定的类不相关，我们就简单的不为该类定义相应的属性或者操作。例如，对于有些需要相对优先级概念的MI类，我们就会有优先级属性的等价物，而对于没有该属于的类，我们就不做定义。</p>

<p>类原型的每个典型属性或者操作可能匹配特定类上的多个属性或操作。例如，一个具有复杂生命周期的MI类可能同时需要最大和最小状态属性。</p>

<p>这些典型属性或者操作列表也不是详尽的。我们定义的类将涉及一些不在相关原型列表中的属性或者操作。例如，一个当事人类中构建的对象可能包含一个保留日期，来指示由于某些法律需求，数据必须在何时被销毁。而PPT类中并不存在该属性。</p>

<p>这些类原型的典型属性和操作，只是为我们实际在定义类时需要的属性和操作提供了特定建议。它们为我们在创建或者审视一个类应属于某个类原型提供了线索和暗示。</p>

<p>换句话说，类原型的每个操作或属性是一个对特定类原型的典型责任的提示。如果我们可以识别出问题域中的类原型类，那么这些典型的操作和属性列表就提供给我们一个检查列表，来帮助我们来或在我们的模型中审查承担合适地责任。例如，每个类原型中的第一个属性是某种标示或者参考号码。这提示我们，属于任何类原型的对象都有责任使他们与其所代码的真实世界相匹配。例如，现金销售对象通常将收据编号作为参考编号，使其可以与其完成特定交易相匹配。出纳员对象可能需要记住用户名来匹配他们在其登录时的人类对象，等等。</p>

<p>事实上，类原型具有名称，典型属性列表和典型操作类别使用统一建模语言（UML）以图像的方式来表示类原型。我们会重复利用图3所示的一些属于原型类的标记。</p>

<p><strong>原型建模</strong></p>

<p>为了重复履行其职责，对象需要频繁的与同一个或者不同类之间的对象合作。因此，原型类中的许多典型责任意味着与其他类的典型关联，和与其他类的对象之间的典型交互方式。这些典型关联和它们对象之间的典型交互方式使得我们能够将类原型合并成原型、问题域对象模型。这些模型原型或者中立域组件作为我们分析和定义模型的常用模式。</p>

<p><img src="http://www.step-10.com/SoftwareDesign/ModellingInColour/images/FourClassArchetypesLinked.jpg" alt="FourClassArchetypesLinked" /></p>

<p>图4：四类原型链接到基本模型原型</p>

<p><img src="http://www.step-10.com/SoftwareDesign/ModellingInColour/images/DNC.gif" alt="DNC" /></p>

<p>图5：基本模型原型将参与人、地点、事件中扩展的详细中立域组件</p>

<p>使用中立域组件（Domain Neutral Component (DNC)）可以真正帮助我们提高构建问题域对象模型的速度。从识别感兴趣的特定问题域中的一个或多个时刻间隔类开始，然后依次对这些类使用DNC覆盖，逐步利用DNC中的条目替换特定问题域中条目，或者删除问题域中没有等价物的条目或模型不需要的条目。</p>

<p>DNC在审查现有模型中也非常有用。首先，通过分配原型到每个类来在模型中显示颜色。然后调整和证明DNC中的偏差和遗漏。但是，请记住，DNC是一种模型，但不是元模型（meta-model）。元模型定义了一系列创建兼容模型的严格规则。DNC不是这样的，它更加宽松，是一套建议和提示。在许多情况下，一些与模型的合理偏差是需要、期望、和必要的。</p>

<ul>
<li><a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/dnc.html">阅读更多关于原型使用和DNC的材料&hellip;</a></li>
</ul>


<p>当我们第一次遇到它时，很多人对DNC在实践中的适用性提出了怀疑。我也拥有同样的问题。有两个原因使得我认为DNC比初始预期的更加适用。首先，大多数的商业系统都适用于特定的商业事件或活动，或者某种商业流程的事件或活动。MI模型就塑造了这些商业事件和活动。对于每个商业事件和活动，通常以不同的方式设计不同的人或组织。这些事件和活动通常发生在某些地方，即使是在网络空间。商业事件和活动经常涉及购买、销售、分配和移动东西。角色、当事人、地点、事件塑造了谁，在哪里，和那种形式的商业事件和活动。描述模型塑造了当事人、地点、事物在商业活动中的不同集合或分类。另外，重点第一是MI，其次是角色，角色扮演者，和帮助防止集中倾向于中心事件和在更加传统实体关系图（Entity-Relationship Diagramming (ERD)）中集中更多角色扮演者的描述。</p>

<p>第二个DNC比预期更加合适的原因是我在与来自TogetherSoft，Borland和Karl Frank的一个老同事讨论是出发的一些灵感。当你退一步思考后，你会意识到DNC本质上是PPT之间的UML关联的自然扩展。MI在许多方面类似于关联类的想法，角色类与关联末端发现的角色名称的想法类似。</p>

<ul>
<li><a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/FromUMLAssociationToDNC.html">阅读更多关于DNC和UNL的关联关系&hellip;</a></li>
</ul>


<p>与<a href="http://www.step-10.com/Books/JMCUBook.html">《Java Modeling in Color with UML》</a>书中提到的相比，近些年，我又补充了关于DNC的小改动，<a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/DNCChanges.html">阅读更多关于这些修改&hellip;</a></p>

<p><strong>彩色建模法</strong></p>

<p>尽管在没有颜色的情况下类和模型原型也可以很有效，但是颜色编码为该技术命名。实践中证明，颜色编码是非常有效的，它可以有效减少我们使用它需要付出的代价。</p>

<p>色彩使得类原型更加易学易记。它还使得类原型在非平凡（non-trivial）UML类和序列图中更容易识别。当你初次或者比较少接触对象建模，如果呈现出一个复杂的图表会特别难以理解，而色彩将使得这些图表变得易于理解。它使得诸如项目消费者和终端用户可以更好的在建模过程中做出贡献。例如，他们可以很快识别和集中精力在粉红色的MI类所代表的他们感兴趣的业务交互中，并由此展开工作。</p>

<p>对象建模技术带来的最大好处是使得表达复杂分析和设计更加容易（上世纪90年代后期以及UML2.0规范中的那些冗长，太过于细节的建模方式中很容易被丢失和忘记的模型）。对色彩的使用能够显著增加用UML类图和时序图沟通时的能力。</p>

<p>对于那些关注为什么用彩色建模可以很好工作的人，<a href="http://www.step-10.com/SoftwareDesign/ModellingInColour/ColourCoding.html">彩色建模法</a>还有一些关于如何使用颜色，每种颜色代表哪种类原型的讨论。</p>

<p>对于大多数人来说，学习并记得下面这四种色彩就已经足够了：</p>

<p>MI类是柔和的粉红色。粉红色的发生！</p>

<p>角色类是柔和的黄色。我们总是带着黄色的帽子！</p>

<p>PPT类是柔和的绿色。戴黄帽子的家伙们都是绿的的！</p>

<p>描述类是柔和的蓝色。你给东西打上蓝色的标签！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成之我见（四）]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2016/10/07/chi-xu-ji-cheng-zhi-wo-jian-si/"/>
    <updated>2016-10-07T21:09:21+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2016/10/07/chi-xu-ji-cheng-zhi-wo-jian-si</id>
    <content type="html"><![CDATA[<h2>持续集成成熟度模型</h2>

<p>前面的文章介绍了持续集成的概念、工具等，那么了解这些概念、使用了这些工具就算做到了持续集成吗？答案当然不是这样。我们将在这篇文章中通过持续集成成熟度模型来探讨这个问题。</p>

<p>成熟度模型分为五个级别：</p>

<ul>
<li>入门（Base）：这个级别刚刚跟“模型”沾边，团队不再是所有的流程都要手动去操作。</li>
<li>新手（Beginner）：团队开始认真采用一些持续集成的实践，但是还在刚起步的水平。</li>
<li>中等（Intermediate）：实践已经成熟一些，能够减少错误，提高效率。</li>
<li>优化（Advanced）：团队已经远远超出同行业其他团队，而且效率非常高，能够预防错误的发生。</li>
<li>专家（Expert）：达到这个级别的要求，代价是非常昂贵的，但对某些团队来说，这是目标。</li>
</ul>


<p>其考察维度有四个，分别是构建（Building），部署（Deploying），测试（Testing），和报告（Reporting）。下面我们将从这四个维度分别讨论成熟度模型。</p>

<h3>构建</h3>

<p>以开发人员为中心的持续集成是为了从软件构建中快速得到反馈。但是当项目规模扩大后，构建管理和可控的构建流程就会变得至关重要。可控的构建流程规定了从源码检索到构建、打包、以及存储等的全过程。</p>

<p>在大多数项目的初始阶段，构建工作都是在开发机器上进行，程序员可以根据个人喜好使用IDE或者构建脚本。等项目成熟一些，构建工作就需要考虑测试，甚至发布等问题，这时候我们就开始需要一个成熟可控的构建过程。</p>

<ul>
<li>入门：有明确的构建脚本；有专门的构建机器。（业界水平）</li>
<li>新手：能够自动化构建；至少每天晚上构建一次；能够保存生成的artifacts；</li>
<li>中等：每次提交代码后构建；有依赖管理仓库；</li>
<li>优化：构建过程控制；构建集群；（目标）</li>
<li>专家：虚拟机镜像构建；提交门禁；</li>
</ul>


<p>成熟构建的第一阶段就是标准化构建过程，并且让构建有专门的机器。使用专门的机器构建意味着构建过程不会因为某个开发人员本地环境的变化而影响构建结果。构建不在开发者的机器上进行，意味着代码是从一个代码控制平台获得，并遵循一定的规则：比如每次获取每个分支的最新代码，或者打某种标签的代码。做到了这些，团队就达到了入门级。</p>

<p>新手级别是团队采取一定行动使得构建执行自动化，并且能够每天至少执行一次。构建服务器可以指挥机器按照规则pull源代码，并且执行构建脚本。</p>

<p>中等级别的团队的显著特征是开始进行依赖管理，包括对子项目的依赖和第三方库文件的依赖。团队使用依赖管理工具来追踪库文件，并且在构建时提供这些库文件，而不是将依赖放在代码库中。类似的，所依赖的子项目也是通过依赖管理工具管理和使用。构建过程会被保存（可能放在某网络服务器上，或是直接放在CI服务器上），打标签以便识别，并且定期做清理。到达这个级别，团队已经采取了持续构建，能在程序员提交代码后或者依赖变更后自己构建，并且提供有意义的反馈。一些大规模团队将使用分布式构建设备来并行处理数量众多的构建。</p>

<p>优化级别的团队将会关注对构建过程的控制，这种团队不光追踪代码和依赖的变化，也追踪构建过程的变化。对于构建过程的修改需要经过批准，因此登录到构建机器，修改构建服务器配置等操作都是被严格限制的。大规模的组织或者追求快速集成测试的组织往往需要优化级别的构建过程。随着每天构建次数的增加，或者构建环境的多样化（比如同时需要Windows设备和Linux设备），单独的构建设备就显得力不从心，我们就需要一个集群来自动选择构建集群并进行负载均衡。</p>

<p>专家级别要求团队必须能够完美地重新构建以前的发布版本。团队将使用各种各样的技术来确保每个环境的可重复性。为了运行构建过程，我们使用一些缜密的脚本，从安装操作系统开始准备构建机器，或者使用虚拟机镜像来运行版本化的构建过程。还有一些团队使用提交门禁制度使得build常绿，一旦某次提交使得构建失败，那么这次提交就会被reject掉。</p>

<h3>部署</h3>

<p>部署是将软件发布给用户，或者其他消费者。对于web应用来说，部署意味着将应用安装到一系列的web服务器上，并且更新数据库或者其他静态服务器。</p>

<p>部署的最开始一般都是手工进行，像我的上个项目，程序员将本地的部署文件拷贝到目标机器上，然后手动进行替换和安装。手工过程往往非常慢，而且特别容易出错，为了发布新的软件，开发人员和测试人员往往需要整晚加班。很多软件都需要多环节部署，而且不同环境的部署方法和步骤往往不一样，更加增大了手工部署的难度，这时候，我们就要寻找更加快捷高效的方法。</p>

<ul>
<li>入门：有少量部署脚本；（业界水平）</li>
<li>新手：自动部署到测试环境；有比较规范的部署；</li>
<li>中等：自动部署到测试和产品环境；在所有环境都有标准的流程；（目标）</li>
<li>优化：测试门禁部署；数据库的自动化部署；协调部署；</li>
<li>专家：持续部署到产品环境；</li>
</ul>


<p>入门级别的团队能在部署时使用一些的辅助性脚本，相对于纯手工部署来说，这已经是很大的进步。目前来讲，大部分团队都会使用一些辅助部署脚本，达到入门级的水平。</p>

<p>新手级别的团队能够才测试环境实现的自动部署。通过一系列脚本的帮助，系统可以一键部署到一个或者所有测试环境。这将大大减少负责部署人员的工作量，也可以减少测试团队等待部署的时间。自动部署到第一个测试环境，是持续集成的部署维度达到新手水平的标志。根据团队情况，在不影响部署的情况下，部署工作应该发生在每一次成功构建之后，或者是以固定的间隔时间进行。新手级别的另一个标志是：在各个环境上建立标准化的部署流程。虽然部署中间还充满各种变数，但是在软件开发生命周期中，尽早的部署成功不但能增加团队信心，更能及早的发现问题，增加最终部署成功的几率。</p>

<p>中等级别的团队已经能够将关注点放在产品环境的部署。产品可以一键触发部署流程，然后自动部署到产品环境，并且相应的发布版本可以做到灾难恢复。那些已经将产品自动部署的测试环境的团队，应该把中等级别作为目标，如果在所有环境中进行完全一致的部署过程，那么在生产环境部署时，会极大地减少最后一刻失败的可能性。</p>

<p>优化级别的团队的特征是：将通过质量测试检验的版本全部自动地部署到部分或全部测试环境中。例如，得到测试经理的批准后，让某个构建版本自动地安装到压力测试环境中。另外，他们还攻克了一些部署过程的难题，比如数据库部署，向内容管理系统跟新信息，提升业务敏捷工具的报告。进阶团队的另一个典型特征是，协调部署。他们不是简单的部署一次构建的结果，而是部署一系列的有内在联系的一组构建，肯能是一个应用，或者一系列Web服务。这样有助于确保系统中的所有已经被测试的组件部署到同一组生产环境。将系统部署细化成一系列的组件部署。</p>

<p>专家级别的团队追求从完全没有任何人工干预的持续部署。也就是说，在构建完成得到一个新的版本后，依次自动部署到所有一系列的测试环境，然后经过所有的自动化测试后立即自动部署该版本到生产环境，而且整个系统必须具有自动回滚和严格的监控手段，对自动化测试的要求特别高。有些Web应用甚至可以做到一个小时内完成从源代码控制到发布的全过程。在竞争激烈的当今社会，快速的发布新功能，也可以增加企业的竞争力，减轻大规模发布的风险。</p>

<h3>测试</h3>

<p>持续集成与自动化测试的层次息息相关。在很多企业中，自动化测试的重视程度很低，能力很弱，一个团队开发完一个产品，然后部署到测试环境，让测试人员进行手工测试，然后进行发布。测试人员几乎到淹没在无穷无尽的重复劳动中，特别疲惫，容易出错，而且只有发现问题的流程很长。如果团队在更加关注自动化测试，增加自动化测试脚本，他们就能很快发现问题或缺陷，从而在生产率和信心方面都会有所增加。</p>

<ul>
<li>入门：有少量自动化测试；（业界水平）</li>
<li>新手：每次构建都进行快速测试；测试失败及时通知；</li>
<li>中等：静态代码分析；具有每天至少执行一次得自动化功能测试；（目标）</li>
<li>优化：高测试覆盖率；安全扫描；基于风险的手工测试；</li>
<li>专家：100%测试覆盖率；</li>
</ul>


<p>大多数团队或多或少都有一些自动化测试，也行是少量的单元测试，或者是一些保证基本功能的测试脚本。这些测试可以帮助我们及时，快速的发现产品的基本功能性问题。入门级别的团队基本处于这个水平，刚刚开始适应自动化测试。</p>

<p>新手级别的团队应该有一套在本次构建时都会自动运行的测试。这些测试保证了软件在任何时间都是可以工作的，能够极大的增加团队信心。任何一次测试失败，系统都应该及时通知开发团队，使得问题能够及时得到修复。测试失败及时通知开发团队，也是达到新手级别的一个标志。</p>

<p>中等级别的团队具备构建时快速测试的特征外，还是得自动化测试更加多样化。一个中级级别的团队不光需要具有快速的单元测试和手工测试，还需具有自动化的功能测试，而且使用一些持续集成工具进行静态代码扫描。静态代码扫描可能不是每天进行，但是必须周期性的进行，一旦代码扫描出现一些严重的代码质量问题，就必须要阻断构建过程，待修复后才能发布产品。</p>

<p>优化级别的团队以“完整测试”为标志，每种类型的测试都要尽其所能的提供最大的作用。单元测试能够覆盖系统中的所有复杂代码和逻辑部分，功能测试能够覆盖系统中所有的重要功能，当然边界测试和随机测试也是必不可少的。同时，还需要频繁的运行静态代码扫描，并补充那些以工具执行的运行时分析和安全分析来分析那些因测试不足或无法测试而遗漏的问题。为了产品的多环境运行，测试会被分配在多种系统下运行，以提供快速的反馈。达到优化级别需要团队付出相当大的投入，但是这些投入对团队来说特别有意义，尤其对那些缺陷的成本很高且需要保持高速前进的团队来说。假如没有这些需求，一般达到中等级别已经能够满足要求。</p>

<p>专家级别团队的典型特征是追求100%的测试覆盖率。尽管100%测试覆盖率的定义在不断变化，但是它反映出至少产品的每行代码都被测试覆盖到。但是，在实际工作中，往往存在一个收益减少点，一味的追求100%覆盖往往意味着浪费。对于这些团队来说，满足并保持100%的测试覆盖率可能也是一个自豪感与动力的源泉。对于进阶级团队来说，如果曾经发现的确错过了一些非常重要的测试的话，要求100%的测试覆盖也未尚不可。但对于大多数团队来说，完全不需要刻意达到这个要求。</p>

<h3>报告</h3>

<p>报告对持续集成至关重要，它应该包括软件质量、软件内容、以及持续集成过程的相关信息。如果产生的信息无序且繁杂，我们就无法提取有用信息，那么对于软件质量的提高也没有什么作用。所以越成熟的团队，信息的可视化程度就越高，用户越容易从中得到有用信息。</p>

<ul>
<li>入门：工具生成报告；生成报告者可见；</li>
<li>新手：及时发布最近一次构建报告；团队可见；</li>
<li>中等：报告历史易追踪；报告互通性</li>
<li>优化：趋势分析报告；</li>
<li>专家：交叉分析</li>
</ul>


<p>持续集成成熟度模型的四个方面大概就是这个样子，我们在实际使用时应该根据项目自身情况，选择适合自身项目的各个维度。<del>真的实在编不下去了，等我看看书再继续充实吧</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成之我见（三）]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2016/09/29/chi-xu-ji-cheng-san/"/>
    <updated>2016-09-29T20:16:22+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2016/09/29/chi-xu-ji-cheng-san</id>
    <content type="html"><![CDATA[<h2>使用Jenkins搭建持续集成环境</h2>

<p>下面我们以Jenkins为例，介绍一些如何快速搭建一个持续集成环境。</p>

<h3>安装Jenkins</h3>

<p>Jenkins可以运行在多种操作系统上，这里主要介绍如何使用docker安装。首先，你需要在本机上安装<a href="http://docker.io/">docker</a>,然后执行一下命令来pull Jenkins的官方镜像：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker pull jenkins</span></code></pre></td></tr></table></div></figure>


<p>然后运行如下命令来run该镜像：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d -p 49001:8080 -v $PWD/jenkins:/var/jenkins_home -t jenkins</span></code></pre></td></tr></table></div></figure>


<p>在上述命令中，container中的 <code>/var/jenkins_home</code> 文件夹被映射到当前路径的 <code>jenkins/</code>路径下，container中的8080端口被映射到本地的49001端口。</p>

<p>至此，我们已经可以 <a href="http://localhost:49001">http://localhost:49001</a> 访问Jenkins, 并看到如下 页面。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/jenkins_start.jpg" alt="输入初始密码解锁Jenkins" /></p>

<p>系统要求你输入Administrator的初始密码来解锁系统，并提示了该密码的所在位置。对于docker来说，你可以输入如下操作查看该container的log，找到密码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker ps -a // 查看当前运行container</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/image.jpg" alt="container的运行状态" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker logs 136d491d56d8 //数字表示Jenkins的container id</span></code></pre></td></tr></table></div></figure>


<p>然后就可以在log中找到如下的初始密码：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/password.jpg" alt="初始密码" /></p>

<p>然后我们可以根据页面提示，安装推荐的plugin，完成注册等初始化操作，就可以看着Jenkins的工作页面。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/jenkins.jpg" alt="Jenkins 首页" /></p>

<p>至此，我们就完成了所有的安装和初始化的工作。</p>

<h3>使用Jenkins</h3>

<p>对于Jenkins 2.x版本，你可以使用以前的方式创建pipeline，当然比较方便的是Pipeline as code。下面我用一个简单的例子，说明如何使用脚本创建pipeline。</p>

<h4>准备工作</h4>

<p>本文中的例子是一个简单的maven构建的java项目，所以准备工作为jenkins安装好java和maven。在Jenkins的首页点击Manage Jenkins -> Global Tool Configuration，然后如下图所示配置：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/jdk.jpg" alt="jdk" /></p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/maven.jpg" alt="maven" /></p>

<h4>Pipeline创建</h4>

<p>完成环境准备工作，我们就可以开始创建Pipeline。在首页点击New Item，然后输入一个item name，选择Pipeline，最后点击OK。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/new.jpg" alt="创建item" /></p>

<p>创建完item之后，就会进入配置页面，我们在这里需要配置trigger方式，以及Pipeline脚本等。配置pipeline脚本有两种方式，一种是写在页面上，一种是写在源代码中。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/script.jpg" alt="配置item" /></p>

<p>配置完成后，点击Build Now，就可以开始build我们的项目了。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/build.jpg" alt="构建状态" /></p>

<p>如图是我们的构建结果，一列是一个stage，每个stage执行脚本中定义的操作。</p>

<h4>Pipeline说明</h4>

<p>上述Pipeline有如下的基本概念：</p>

<ul>
<li>Stage: 一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作。注意，Stage是一个逻辑分组的概念，可以跨多个Node。</li>
<li>Node: 一个Node就是一个Jenkins节点，或者是Master，或者是Agent，是执行Step的具体运行期环境。</li>
<li>Step: Step是最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类Jenkins Plugin提供。</li>
</ul>


<p>具体构成如下：</p>

<ul>
<li>Stage View: Pipeline的视觉展现，类似于上图。</li>
<li>Jenkinsfile: Pipeline的定义文件，由Stage，Node，Step组成，一般存放于代码库根目录下，如下所示。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">node</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">def</span> <span class="nx">mvnHome</span>
</span><span class='line'>   <span class="nx">stage</span><span class="p">(</span><span class="s1">&#39;Preparation&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// for display purposes</span>
</span><span class='line'>      <span class="c1">// Get some code from a GitHub repository</span>
</span><span class='line'>      <span class="nx">git</span> <span class="s1">&#39;https://github.com/jglick/simple-maven-project-with-tests.git&#39;</span>
</span><span class='line'>      <span class="c1">// Get the Maven tool.</span>
</span><span class='line'>      <span class="c1">// ** NOTE: This &#39;M3&#39; Maven tool must be configured</span>
</span><span class='line'>      <span class="c1">// **       in the global configuration.           </span>
</span><span class='line'>      <span class="nx">mvnHome</span> <span class="o">=</span> <span class="nx">tool</span> <span class="s1">&#39;M3&#39;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">stage</span><span class="p">(</span><span class="s1">&#39;Build&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Run the maven build</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">isUnix</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">sh</span> <span class="s2">&quot;&#39;${mvnHome}/bin/mvn&#39; -Dmaven.test.failure.ignore clean package&quot;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">bat</span><span class="p">(</span><span class="sr">/&quot;${mvnHome}\bin\mvn&quot; -Dmaven.test.failure.ignore clean package/</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">stage</span><span class="p">(</span><span class="s1">&#39;Results&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">junit</span> <span class="s1">&#39;**/target/surefire-reports/TEST-*.xml&#39;</span>
</span><span class='line'>      <span class="nx">archive</span> <span class="s1">&#39;target/*.jar&#39;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jenkins 2.x 默认支持三种类型的Pipeline有三种，普通Pipeline，Multibranch Pipeline和Organization Folders，后两种其实是批量创建一组普通Pipeline的快捷方式，分别对应于多分支的应用和多应用的大型组织。注意，要获取Organization Folders的支持需要额外安装Plugin。</p>

<p>至此我们已经介绍了Jenkins的安装以及Pipeline as Code的基本用法，更多关于Jenkins的操作请参见<a href="https://jenkins.io/doc/">官方文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成之我见（二）]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2016/09/28/chi-xu-ji-cheng-er/"/>
    <updated>2016-09-28T10:41:35+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2016/09/28/chi-xu-ji-cheng-er</id>
    <content type="html"><![CDATA[<h2>持续集成工具推荐</h2>

<p>前面的文章提到了一些关于持续集成的概念，以及持续集成工具应该具有的功能，和团队成员应该遵守的ci纪律，下面我讲介绍几种常用的持续集成的工具。</p>

<h3>Jenkins</h3>

<p><a href="https://jenkins.io/">Jenkins</a>是一个应用广泛的开源持续集成工具，它提供了数百个插件来支持项目的自动化编译、测试、部署等，使得开发人员可以从繁杂的集成中解脱出来，专注在更加重要的业务逻辑实现上。同时 Jenkins 能实时监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。Jenkins可以很好的支持各种语言（比如：java, c#, php等）的项目构建，也完全兼容ant、maven、gradle等多种第三方构建工具，同时跟svn、git能无缝集成，也支持直接与知名源代码托管网站，比如github、bitbucket直接集成。关于如何使用Jenkins，后续文章会做详细的介绍。</p>

<h3>Travis CI</h3>

<p><a href="https://travis-ci.org/">Travis CI</a>是一个可以与Github完美集成的开源持续集成工具，当用户登录到Travis CI之后，可以同步的从界面中看到该用户Github账号中的repo，用户可以方便的为这些repo中的代码创建ci。它不需要复杂的界面，允许你通过在源码里面增加一个名为<code>.travis.yml</code>的文件来对构建进行配置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruby</span>
</span><span class='line'><span class="l-Scalar-Plain">rvm</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">2.2</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jruby</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">rbx-2</span>
</span></code></pre></td></tr></table></div></figure>


<p>上文中的配置文件告诉Travis CI这是一个Ruby项目，将会使用rake构建。接下来的rvm告诉Travis CI，这个项目的测试环境是Ruby 2.2，最新版本的JRuby和Rubinius。用户只需将这个配置文件提交到代码库中就可以触发Travis CI构建项目，并在构建页面来查看项目构建状态。</p>

<h3>Concourse</h3>

<p><a href="http://concourse.ci/">Concourse</a>是一个开源的持续集成工具，它使用yaml文件来配置pipeline，以及设置其他无需配置的安装。根据其开发团队的说法，它的主要优点是：</p>

<ul>
<li>为pipeline提供明确的、第一级的支持；</li>
<li>在容器中运行相互隔离的构建工作；</li>
<li>可避免使用雪花型构建服务器；</li>
<li>能够方便地访问日志；</li>
<li>概念简单。</li>
</ul>


<p>Concourse的最终目标是以尽可能少的变化部分提供一种具有表达性的系统。它设立了三种核心概念：任务、资源、作业。</p>

<ul>
<li>任务（Task）是执行的基本单元，表现为在一个全新启动的容器中所运行的脚本。容器已经经过了预处理，因此其中包含了一个输入与输出目录，任务脚本可在这些目录中运行。</li>
<li>资源（Resource）则表现为版本化资源的抽象位置，例如某个repo。资源也可用于对进入或退出某个管道的外部依赖进行建模，或是表示更抽象的概念，例如时间触发器。资源的变更可被检测、获取、以及发布。不同的资源类型（例如Git、AWS S3或触发器）可用于封装用于管道的各种样板代码，为Concourse的扩展提供了一个可适配的接口。</li>
<li>作业（Job）是由资源与任务构成的，通过构建计划实现。作业可由资源的变更所触发，也可以选择手动触发，以实现人工批准流程。</li>
</ul>


<p>一个作业计划的执行实例被称为一次构建（Build），Concourse中的构建是可重复使用的，因为其中的任务在新的容器中也将重新运行。因此，构建的工作线程不会受到之前运行结果的变更所影响。此外，如果某次构建失败了，也可以通过一个名为Fly的Concourse命令行工具在某个容器中再一次在本地运行，通过这种方式实现更快的开发周期。</p>

<h3>Go</h3>

<p><a href="https://www.go.cd/">Go</a>是ThoughtWorks开发的一款开源持续集成工具。它采用了Server-Agent模式，Server用来展示和配置pipeline的界面，并存放构建出来的Artifacts；Agent用来执行构建操作，一个Server可以和多个Agent建立连接，Agent支持多个主流的操作系统。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_ci/go_cd.jpg" alt="Server Agent模式" /></p>

<p>每种工具的具体使用方法，请详见各自的文档。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成之我见（一）]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2016/09/27/chi-xu-ji-cheng/"/>
    <updated>2016-09-27T22:12:38+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2016/09/27/chi-xu-ji-cheng</id>
    <content type="html"><![CDATA[<h2>什么是持续集成</h2>

<p><a href="http://baike.baidu.com/view/5253255.html">持续集成（Continuous integration）</a>是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>

<h2>为什么要持续集成</h2>

<p>在我刚到上一个项目时，团队成员工作在下面一种工作模式中。项目代码在开发人员的本地，一个人负责一个或多个小项目。需求分析人员写好需求文档，然后和开发人员、测试人员一起开一个需求评审会，然后开发人员开始写代码，测试人员开始写测试文档。当开发完成需求后，手动的完成代码打包，然后手动部署到SIT环境供测试人员进行测试。部署完成后，测试人员就开始了疯狂的寻找bug之旅，将bug录入系统并交给开发去改，周而复始，完成上面的往复。直至此环境的测试工作完成，然后开发人员又去手动部署到UAT环境，依旧完成上次的循环，直至项目发布。在项目发布之前还会将代码拷贝给其他部门进行代码规范、安全等审查，在针对审查出来的问题进行改正，往往这个改动又会引入其他问题。</p>

<p>这种系统，采用传统的模式开发，在代码开发完成后才集成起来进行测试，很多在项目早期就存在的bug都是在完成开发工作之后才被发现，不利于定位问题，增加工作难度，而且每次部署都是手动的，有的环境甚至有几十台机器需要部署，单单打包部署这种重复劳动就使开发人员的工作苦不堪言。开发从来不写单元测试，甚至也不怎么认真进行自测，完成代码就交给测试去测，甚至还会发现将输入页面的用户名和密码的输入框写反了这种低级错误，而且项目一旦出现问题就是为什么测试人员没有测出来这个bug，我甚至遇到过因为项目出了线上bug而将测试人员开除的情况，这使得测试人员的工作也是压力山大。</p>

<p>在这种困境之下徘徊很久，项目组引入持续集成的概念，使用git作为版本控制工具，使用gradle作为构建工具，使用Jenkins搭建ci，增加自动化的代码编译、审查、单元测试、集成测试，以及自动化部署等。从艰难推行，到客服困难运行了一段时间之后，发现持续集成给项目带来了很多好处。</p>

<h3>减少重复过程</h3>

<p>在以前的工作模式中，代码的编译、审查、测试、打包、部署、反馈等工作，都是手动进行，费时费力，而且容易出错。通过自动化的持续集成可以将这些重复的动作都变成自动化的，无需太多人工干预，减少重复的过程，可以节省时间、费用和工作量，让人们的时间更多的投入到动脑筋的、更高价值的事情上。</p>

<h3>减少风险</h3>

<p>在一个项目中，最不可靠最容易出错的因素就是人，减少大量重复的人力工作就大大的降低了项目的风险。另外，一天中进行多次的集成，并做了相应的自动化测试，这样有利于检查缺陷，了解软件的健康状况，减少假定。利用持续集成，开发人员对源代码进行的小改动，会及时和其他的代码进行集成，一旦出现问题，项目成员马上就会被通知到，问题也会在第一时间被修复。</p>

<h3>任何时间、任何地点生成可部署的软件</h3>

<p>开发提交代码之后，只有构建成功，就会生成一个在任何时间可部署的软件产品，可恐怕是对用户来说最显而易见的好处。不采用持续集成的情况下，项目中的问题有可能到交付前的集成测试的时候才发现，有可能会导致延迟发布产品，而在急于修复这些缺陷的时候又有可能引入新的缺陷，最终可能导致项目失败。</p>

<h3>增强项目的可见性</h3>

<p>持续集成可以带来两点积极效果：</p>

<ul>
<li>有效决策：持续集成系统为项目构建状态和品质指标提供了及时的信息，有些持续集成系统可以报告功能完成度和缺陷率。</li>
<li>注意到趋势：由于经常集成，我们可以看到一些趋势，如构建成功或失败、总体品质以及其它的项目信息。</li>
</ul>


<p>如果没有真实或最新的数据提供支持，项目就会遇到麻烦，每个人都会提出他最好的猜测。通常，项目成员通过手工收集这些信息，增加了负担，也很耗时。</p>

<h3>建立团队对开发产品的信心</h3>

<p>采用持续集成，团队成员可以清楚的知道每一次构建的结果，看到自己对软件的改动造成了哪些影响，结果怎么样，这种即时、可视化的信息可以增加了团队的信心。</p>

<h2>如何做到持续集成</h2>

<p>根据上文的描述，我们使用的持续集成工具需要做到下面几个功能：</p>

<ul>
<li>自动构建：构建工作需要在提交代码之后自动执行，要求无人值守，如果人工来操作，那么持续集成就毫无魅力。</li>
<li>发现版本库的变更：通过轮询或者定时，触发持续集成工具发现版本库的变更。</li>
<li>反馈机制：在出现问题时，能及时的把问题反馈给正确的人（提交者、测试者、管理者）</li>
<li>回滚：在出现问题后，拥有回滚到可交付的能力。</li>
<li>纯净的构建环境：每一次都应该把之前的环境删除干净，让每一次构建都是一个新的构建。</li>
<li>完善的集成功能：代码的测试，审查，部署都应该做到完善。如果单纯的利用它做持续的编译，那就是大材小用了。</li>
</ul>


<p>使用持续集成工具搭建构建流水线仅仅是第一步，全组成员依照默认的纪律使用ci才能使其最大化发生作用。一个开始准备要提交新修改的代码时，应该遵循如下步骤：</p>

<ol>
<li>查看ci是否正在构建。如果有的话，你要等它运行完。如果构建失败了，你要与团队成员一起将其修复。</li>
<li>一旦构建完成且测试全部通过，就从版本控制库中更新最新的代码到本地。</li>
<li>在本地执行构建脚本，运行测试，以确保代码在本地可以正常工作。</li>
<li>如果本地构建成功，就将代码提交到远端代码库。</li>
<li>等待这次提交的构建结果。</li>
<li>如果构建失败，就应该停下来手头的工作，修复构建问题，然后转到步骤3。</li>
<li>如果构建成功，你就可以happy的进行接下来的工作了。</li>
</ol>


<p>至此，我们对持续集成已经有了一个简单的认识，在接下来的文章中，我将会介绍一些持续集成工具，以及如何使用这些工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个简单的负载均衡系统]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2015/07/29/nginx-sinatra/"/>
    <updated>2015-07-29T17:19:11+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2015/07/29/nginx-sinatra</id>
    <content type="html"><![CDATA[<p><a href="http://baike.baidu.com/link?url=IJriLUPAnM_nNxQw8eVoqfU4R9Tc8sl28d5QcZ7sOYp9jcNAA-HGq7RENalBfm-a">负载均衡</a>是由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无须其他服务器的辅助。通过某种负载分担技术，将外部发送来的请求分配到对称结构中的某一台服务器上，而接受到请求的服务器独立的回应客户的请求。负载均衡能够平均分配客户请求到服务器阵列，以提高相应速度，解决大量并发访问服务器问题。实现网络的负载均衡有很多方法，例如使用Nginx, LVS, HAProxy，f5等。本文将介绍如何使用Nginx配置一个简单的负载均衡系统。</p>

<p><a href="http://nginx.org/">Nginx</a>是一款轻量级的Web服务器/反向代理服务器以及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强。本文会将Nginx封装在一个Docker Image中，将其作为Web服务器，分发来自用户的请求到不同的App服务器中，其中的App服务器是也是一个Docker Image封装的简单的Sinatra应用。然后将几个Image运行在一个Ubuntu机器上，模拟一个Web服务器和多台App服务器的环境，当然你的机器上首先需要<a href="https://docs.docker.com/installation/ubuntulinux/">安装Docker</a>。</p>

<p>下面先来看看怎么实现这两个Docker Image。</p>

<h2>创建Sinatra App服务</h2>

<h3>Docker Image实现代码介绍</h3>

<p><a href="http://jiamaoweilie.github.io/blog/2015/07/12/docker/">上篇文章</a>中介绍了如何使用Docker构建开发环境，这里不在赘述，直接看看它的Dockerfile文件的内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM ubuntu:14.04
</span><span class='line'>
</span><span class='line'>MAINTAINER wei 20150629
</span><span class='line'>
</span><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install -y build-essential wget git
</span><span class='line'>RUN apt-get install -y zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev libmysqlclient-dev
</span><span class='line'>RUN apt-get clean
</span><span class='line'>
</span><span class='line'>RUN wget http://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.2.tar.gz
</span><span class='line'>RUN tar xvf ruby-2.2.2.tar.gz
</span><span class='line'>RUN cd /ruby-2.2.2; ./configure; make install
</span><span class='line'>
</span><span class='line'>RUN gem update --system
</span><span class='line'>
</span><span class='line'>RUN gem install bundler
</span><span class='line'>
</span><span class='line'>ADD app.rb /app.rb
</span><span class='line'>
</span><span class='line'>ADD Gemfile /Gemfile
</span><span class='line'>
</span><span class='line'>ADD config.ru /config.ru
</span><span class='line'>
</span><span class='line'>RUN bundle install
</span><span class='line'>
</span><span class='line'>EXPOSE 9292
</span><span class='line'>
</span><span class='line'>CMD rackup --host 0.0.0.0</span></code></pre></td></tr></table></div></figure>


<p>从上述代码可以看出，该Image使用ubuntu:14.04作为基础，然后使用apt-get安装一些工具，再安装了ruby环境，并将app.rb、Gemfile、和config.ru文件拷贝到Image中，然后执行<code>bundle install</code>安装应用所使用的gem依赖,再将9292端口暴露出来，最后使用rackup命令启动该应用。</p>

<h3>应用实现代码介绍</h3>

<p>该实例的<code>app.rb</code>实现了一个特别简单的Sinatra应用，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'sinatra'
</span><span class='line'>
</span><span class='line'>class App &lt; Sinatra::Base
</span><span class='line'>  get '/' do
</span><span class='line'>    "Hello World!"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>Gemfile</code>文件中定义了该应用的gem依赖：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source 'https://rubygems.org'
</span><span class='line'>
</span><span class='line'>gem 'sinatra'</span></code></pre></td></tr></table></div></figure>


<p><code>config.ru</code>文件为使用Rack的gem中提供的工具rackup工具为该应用编写了一个启动项，具体内容为下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require File.dirname(__FILE__) + '/app'
</span><span class='line'>
</span><span class='line'>run App</span></code></pre></td></tr></table></div></figure>


<p>完成上面代码之后，像Dockerfile文件中那样，执行<code>bundle install</code>安装依赖，然后执行<code>rackup</code>启动程序，访问<code>localhost://9292</code>就会显示<strong>Hello World!</strong></p>

<p>完成代码的编写之后，运行<code>docker build</code>命令来build我们的Image：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker build -t docker-sinatra .</span></code></pre></td></tr></table></div></figure>


<p>执行完该命令之后就生成了一个名为docker-sinatra的docker image，我们可以通过<code>docker images</code>命令查看当前机器上所有的docker image。</p>

<p>然后执行如下命令来生成一个Container来运行该image：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d -p 8080:9292 docker-sinatra</span></code></pre></td></tr></table></div></figure>


<p>该命令运行名为docker-siatra的Image，并将Container中的9292端口映射到Ubuntu的8080端口，这样我们访问<code>localhost://8080</code>就可以看到我们想要的<strong>Hello World!</strong>了。</p>

<p>同样，如果我们想要8081端口也运行着这个app服务，只需执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker run -d -p 8081:9292 docker-sinatra</span></code></pre></td></tr></table></div></figure>


<p>至此，我们已经实现了两个简单的Sinatra App服务，下面就来看看如何使用Nginx来分配用户的访问请求。</p>

<h2>使用Nginx实现负载均衡</h2>

<h3>创建Nginx Docker Image</h3>

<p>具体的Dockerfile文件如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM ubuntu:14.04
</span><span class='line'>
</span><span class='line'>MAINTAINER wei 20150629
</span><span class='line'>
</span><span class='line'>RUN apt-get update && \
</span><span class='line'>    apt-get install -y nginx && \
</span><span class='line'>    rm -rf /var/lib/apt/lists/* && \
</span><span class='line'>    echo "\ndaemon off;" &gt;&gt; /etc/nginx/nginx.conf && \
</span><span class='line'>    chown -R www-data:www-data /var/lib/nginx
</span><span class='line'>
</span><span class='line'>ADD run.sh /run.sh
</span><span class='line'>
</span><span class='line'>RUN chmod 755 /*.sh
</span><span class='line'>
</span><span class='line'>VOLUME ["/etc/nginx/sites-enabled", "/etc/nginx/certs", "/etc/nginx/conf.d", "/var/log/nginx", "/var/www/html"]
</span><span class='line'>
</span><span class='line'>WORKDIR /etc/nginx
</span><span class='line'>
</span><span class='line'>CMD ["/run.sh"]
</span><span class='line'>
</span><span class='line'>EXPOSE 80 </span></code></pre></td></tr></table></div></figure>


<p>从上述代码可知，该Image安装了nginx，并配置了一些共享目录，最后run了一个脚本来启动nginx服务。</p>

<p>其中<code>run.sh</code>的内容为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># start nginx service
</span><span class='line'>/usr/sbin/nginx</span></code></pre></td></tr></table></div></figure>


<p>以上部分我们就完成了Nginx的Docker Image的基本编写，这时候<code>build</code>这个image：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker build -t docker-nginx .</span></code></pre></td></tr></table></div></figure>


<p>然后run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo docker run -d -p 80:80 docker-nginx</span></code></pre></td></tr></table></div></figure>


<p>访问<code>localhost</code>，可以看到如下页面：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_LB/nginx.png" alt="" /></p>

<p>这说明Nginx服务已经启动，下面我们就来更改它的配置文件使之可以作为Web服务器，分配用户访问请求到我们上面已经启动的两个app服务器上。</p>

<h3>Nginx配置文件</h3>

<p>Nginx的配置文件为<code>nginx.conf</code>，一般的存储路径为<code>/etc/nginx/nginx.conf</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#运行用户
</span><span class='line'>user www-data;
</span><span class='line'>#启动进程,通常设置成和cpu的数量相等
</span><span class='line'>worker_processes 1;
</span><span class='line'>#全局错误日志及PID文件
</span><span class='line'>error_log  /var/log/nginx/error.log;
</span><span class='line'>pid /run/nginx.pid;
</span><span class='line'>
</span><span class='line'>#工作模式及连接数上限
</span><span class='line'>events {
</span><span class='line'>  worker_connections 768;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#设定http服务器，利用它的反向代理功能提供负载均衡支持
</span><span class='line'>http {
</span><span class='line'>  
</span><span class='line'>  #设定mime类型,类型由mime.type文件定义
</span><span class='line'>  include /etc/nginx/mime.types;
</span><span class='line'>  default_type  application/octet-stream;
</span><span class='line'> 
</span><span class='line'>  #sendfile指令指定nginx是否调用sendfile函数（zero copy 方式来输出文件，对于普通应用必须设为on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
</span><span class='line'>  sendfile        on;
</span><span class='line'>  keepalive_timeout  65;
</span><span class='line'>  
</span><span class='line'>  #设定负载均衡的服务器列表
</span><span class='line'>  upstream allserver {
</span><span class='line'>    server 192.168.59.104:8080;
</span><span class='line'>    server 192.168.59.104:8081;
</span><span class='line'>  }
</span><span class='line'>  server {
</span><span class='line'>    #侦听80端口
</span><span class='line'>    listen       80;
</span><span class='line'>    #定义使用localhist访问
</span><span class='line'>    server_name  localhost;
</span><span class='line'>    #默认请求
</span><span class='line'>    location / {
</span><span class='line'>      proxy_pass http://allserver;
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>daemon off;</span></code></pre></td></tr></table></div></figure>


<p>上面代码展示了一个基本的Nginx配置文件，和关于该配置文件的简单介绍。其中，upstream节指定了运行在ip为192.168.59.104的机器上8080端口和8081端口的两个网络程序（就是我们上面起的两个sinatra应用）。server节中指定启动一个nginx进程，监听80端口，并将用户的访问全部转发到upstream中的两个程序上。</p>

<p>完成Nginx配置文件的更改之后，需要reload配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/sbin/nginx -s reload</span></code></pre></td></tr></table></div></figure>


<p>这样，我们的配置文件就可以生效了，当用户访问<code>http://localhost</code>就可以看到页面显示的<strong>Hello World!</strong>了。而且，只要这两个程序中的一个还在运行，用户就可以正常的访问。</p>

<p>至此，我们就是用Nginx实现了一个简单的负载均衡系统，该实例中的详细代码，可以参见<a href="https://github.com/jiamaoweilie">我的github</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Docker构建工作环境]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2015/07/12/docker/"/>
    <updated>2015-07-12T23:38:26+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2015/07/12/docker</id>
    <content type="html"><![CDATA[<h3>Docker简介</h3>

<p><a href="https://www.docker.com/">Docker</a>是一个开源项目，诞生于2013年初，最初是dotCloud公司内部的一个业余项目。它基于Google公司推出的Go语言实现。项目后来加入了Linux基金会，遵从了Apache 2.0协议，项目代码在GitHub上进行维护。</p>

<p>Docker自开源后受到广泛的关注和讨论，以至于 dotCloud公司后来都改名为 DockerInc。Redhat已经在其RHEL6.5中集中支持Docker Google也在其 PaaS产品中广泛应用。</p>

<p>Docker项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker的基础是 Linux 容器（LXC）等技术。</p>

<p>在LXC的基础上，Docker进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作Docker的容器就像操作一个快速轻量级的虚拟机一样简单。</p>

<h3>基本概念</h3>

<p>Docker包括三个基本概念：</p>

<ul>
<li>镜像（Image）</li>
<li>容器（Container）</li>
<li>仓库（Repository）</li>
</ul>


<h4>Docker Image</h4>

<p>Image是一个只读的模板，可以用来创建Docker Container。一个镜像可以包含一个完整的ubuntu操作系统环境，里面仅安装了Nginx或用户需要的其它应用程序。Docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p>

<h4>Docker Container</h4>

<p>Docker利用container来运行应用。它就是从image创建的运行实例，可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>

<h4>Docker Repository</h4>

<p>Repository是集中存放镜像文件的地方，分为public和private两种形式。</p>

<p>最大的公开repository是<a href="https://hub.docker.com/">Docker Hub</a>，存放了数量庞大的镜像供用户下载。国内的公开repository包括<a href="http://www.dockerpool.com/">Docker Pool</a>等，可以提供大陆用户更稳定快速的访问。</p>

<p>当然，用户也可以在本地网络内创建一个私有repository。用户创建了自己的image之后就可以使用<code>push</code>命令将它上传到公有或者私有repository，这样下次在另外一台机器上使用这个image时候，只需要从仓库上 <code>pull</code>下来就可以。</p>

<h3>获取和使用Image</h3>

<p>获取镜像的方式有很多种，用户可以直接从repository上<code>pull</code>已有的image，也可以自己创造一个image。这里着重介绍如何创造一个Docker image。</p>

<p>使用<code>docker build</code>创建一个新的镜像，需要首先创建一个Dokcerfile，其中包含一些创建镜像的指令。Dockerfile中的每一条指令创建镜像的一层。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This is a comment
</span><span class='line'>FROM ubuntu:14.04
</span><span class='line'>
</span><span class='line'>MAINTAINER wei 20150629
</span><span class='line'>
</span><span class='line'>RUN apt-get update && \
</span><span class='line'>    apt-get install -y nginx && \
</span><span class='line'>    rm -rf /var/lib/apt/lists/* && \
</span><span class='line'>    echo "\ndaemon off;" &gt;&gt; /etc/nginx/nginx.conf && \
</span><span class='line'>    chown -R www-data:www-data /var/lib/nginx
</span><span class='line'>
</span><span class='line'>VOLUME ["/etc/nginx/sites-enabled", "/etc/nginx/certs", "/etc/nginx/conf.d", "/var/log/nginx", "/var/www/html"]
</span><span class='line'>
</span><span class='line'>WORKDIR /etc/nginx
</span><span class='line'>
</span><span class='line'>CMD /usr/sbin/nginx
</span><span class='line'>
</span><span class='line'>EXPOSE 80 </span></code></pre></td></tr></table></div></figure>


<p>Dockerfile 基本的语法是:</p>

<ul>
<li>使用#来注释</li>
<li>FROM 指令告诉 Docker 使用哪个镜像作为基础</li>
<li>接着是维护者的信息</li>
<li>RUN开头的指令会在创建中运行，比如安装一个软件包，在这里使用<code>apt-get
</code>安装了nginx</li>
<li>ADD 命令复制本地文件到镜像</li>
<li>VOLUME 命令创建一个挂载点用于共享目录</li>
<li>EXPOSE 命令来向外部开放端口</li>
<li>WORKDIR 命令设置当前工作路径</li>
<li>CMD 命令来描述容器启动后运行的程序，比如上例用来启动nginx</li>
</ul>


<p>完成Dockerfile之后，使用<code>docker build</code>命令来生成镜像：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build -t docker-nginx .</span></code></pre></td></tr></table></div></figure>


<p>这条命令表示，<code>build</code>当前路径下的Dockerfile， <code>-t</code>标记来添加tag，指定新的image的信息。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_docker/build.png" alt="" /></p>

<p>从上图中可以看到build进程的执行过程。首先，它会上传Dockerfile的内容，因为所有的操作都依据这个Dockerfile进行。然后，逐条执行Dockerfile里面定义的任务。每一步都创建了一个新的容器，在容器中执行指令并提交修改。当所有的指令都执行完毕之后，返回了最终的镜像 id。所有的中间步骤所产生的容器都被删除和清理了。</p>

<p>使用<code>docker images</code>可以查看当前的所有image，或者对image进行其他操作，比如删除：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker rmi docker-nginx</span></code></pre></td></tr></table></div></figure>


<p>成功创建docker image之后，就是创建执行它的容器了。</p>

<h3>Container的使用</h3>

<p>启动container有两种方式，一种是基于image新建一个容器并启动，另外一个是将在终止状态（stopped）的container重新启动。因为Docker的container特别轻量级，用户可以随时删除和新创建容器。</p>

<p>创建并使用container的主要命令是<code>docker run</code>, 例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d -p 80:80 docker-nginx</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jiamaoweilie.github.io/images/img_for_docker/run.png" alt="" />
<code>run</code>命令执行该image，生成一个容器，<code>-d</code>表示后台运行，并打印出该image的id。-p 80:80，表示将80端口暴露出来。</p>

<p>我们可以使用<code>exec</code>命令进入执行该image的容器：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker exec -it docker-nginx bash</span></code></pre></td></tr></table></div></figure>


<p>使用<code>docker pa -a</code>查看当前所有container的状态：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_docker/con.png" alt="" /></p>

<p>或者使用<code>docker stop</code>来停止一个容器，使用<code>docker rm</code>来删除一个容器。</p>

<p>另外，我们还可以将自己创造的docker image push到远程或者本地的repository中，以方便后续使用。这样我们就可以利用docker，方便的定制自己需要的工作环境，并且能够轻松的移植到任何一台机器上。更多关于docker的操作请参见其<a href="http://docs.docker.com/mac/started/">官方文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装和配置Graphite]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2015/05/19/graphite/"/>
    <updated>2015-05-19T23:20:29+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2015/05/19/graphite</id>
    <content type="html"><![CDATA[<h2>Graphite简介</h2>

<p><a href="https://graphite.readthedocs.org/en/latest/index.html">Graphite</a>是一个Python编写的企业级开源监控工具，采用<a href="https://www.djangoproject.com/">django框架</a>，用来收集服务器所有的即时状态，用户请求信息，<a href="http://memcached.org/">Memcached</a>命中率,<a href="https://www.rabbitmq.com/">RabbitMQ</a>消息服务器的状态，操作系统的负载状态。Graphite服务器大约每分钟需要有4800次的跟新操作，它采用简单的文本协议和绘图功能，可以方便的使用在任何操作系统上。Graphite 自己本身并不收集具体的数据，这些数据收集的具体工作通常由第三方工具或插件完成（如 Ganglia, collectd, statsd, Collectl 等).</p>

<p>简单来说，Graphite主要做两件事情：</p>

<ol>
<li>实时监控第三方工具传来的数据</li>
<li>根据数据绘制图形</li>
</ol>


<p>Graphite包含3个组件，carbon，whisper，graphite webapp其中：</p>

<ol>
<li>carbon - 用于监控数据的 Twisted 守护进程</li>
<li>whisper - 用于存放和操作数据的库</li>
<li>graphite webapp - 用于绘制图形的Django webapp</li>
</ol>


<h2>在ubuntu上安装Graphite</h2>

<p>需要安装一下必要的软件包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install apache2 libapache2-mod-wsgi python-django python-twisted python-cairo python-pip python-django-tagging</span></code></pre></td></tr></table></div></figure>


<p>然后我们使用pip安装Graphite的三个组件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install whisper
</span><span class='line'>sudo pip install carbon
</span><span class='line'>sudo pip install graphite-web</span></code></pre></td></tr></table></div></figure>


<p>这样的方法会将它们安装在默认路径<code>/opt/graphite</code>下，其<a href="https://graphite.readthedocs.org/en/latest/install.html">文档</a>中还提供各种其他安装方法。</p>

<h2>初始化配置</h2>

<h3>local_setting.py</h3>

<p><code>local_settings.py</code>是Graphite-web的基本配置文件，它位于<code>graphite</code>文件下的<code>/webapp/graphite</code>下，在默认安装方式下改文件的路径是<code>/opt/graphite/webapp/graphite/local_settings.py</code>.</p>

<p>我们可以直接拷贝实例配置文件，再根据自身需求做相应修改：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graphite/webapp/graphite/
</span><span class='line'>sudo cp local_settings.py.example local_settings.py</span></code></pre></td></tr></table></div></figure>


<p>基本的配置信息有诸如: <code>TIME_ZONE</code>，<code>DOCUMENTATION_URL</code>, <code>LOG_RENDERING_PERFORMANCE</code>等，可以根据自己需求进行更改。</p>

<p>此处，我们做如下修改：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>TIME_ZONE = 'Asia/Shanghai'
</span><span class='line'>...
</span><span class='line'>DEBUG=True
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p><code>local_setting.py</code>里面还会包含一些关于系统文件路径的配置，可以配置一下Graphite文件系统的路径。例如<code>GRAPHITE_ROOT</code>（graphite安装路径，默认为<code>/opt/graphite</code>）,<code>CONF_DIR</code>(graphite配置文件的路径，默认为<code>GRAPHITE_ROOT/conf</code>)。</p>

<h3>配置web服务器apache</h3>

<p>修改apache配置，需要增加一个<a href="https://httpd.apache.org/docs/2.2/vhosts/">vhost</a>。或者可以下载一个配置文件覆盖<code>/etc/apache2/sites-available/</code>目录下的<code>default</code>文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://launchpad.net/graphite/0.9/0.9.9/+download/graphite-web-0.9.9.tar.gz
</span><span class='line'>tar -zxvf graphite-web-0.9.9.tar.gz
</span><span class='line'>
</span><span class='line'>cd graphite-web-0.9.9
</span><span class='line'>
</span><span class='line'>sudo cp examples/example-graphite-vhost.conf /etc/apache2/sites-available/default</span></code></pre></td></tr></table></div></figure>


<p>同时需要修改default文件下<code>WSGIScriptAlias</code>的路径：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vi /etc/apache2/sites-available/default
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>WSGISocketPrefix /var/run/apache2/wsgi
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>配置完成之后，需要reload。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 reload</span></code></pre></td></tr></table></div></figure>


<h3>配置数据库</h3>

<p>初始化Graphite需要的数据库，需要更改storage的权限：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graphite/webapp/graphite/
</span><span class='line'>
</span><span class='line'>sudo python manage.py syncdb
</span><span class='line'>sudo chown -R www-data:www-data /opt/graphite/storage/</span></code></pre></td></tr></table></div></figure>


<p>然后重启apache：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<h3>配置carbon</h3>

<p>carbon的配置文件位于<code>/opt/graphite/conf</code>下，我们可以通过简单的复制<code>example</code>目录中的文件作为配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graphite/conf/
</span><span class='line'>
</span><span class='line'>sudo cp carbon.conf.example carbon.conf
</span><span class='line'>sudo cp storage-schemas.conf.example storage-schemas.conf
</span><span class='line'>sudo cp graphite.wsgi.example graphite.wsgi</span></code></pre></td></tr></table></div></figure>


<p>配置完成之后，启动carbon，就可以在浏览器中看到Graphite的界面。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /opt/graphite/bin/carbon-cache.py start</span></code></pre></td></tr></table></div></figure>


<p>更多关于Graphite的配置信息，可以参见<a href="https://graphite.readthedocs.org/en/latest/config-local-settings.html#database-configuration">相关文档</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Flyway管理数据库]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2015/01/22/flyway/"/>
    <updated>2015-01-22T22:44:14+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2015/01/22/flyway</id>
    <content type="html"><![CDATA[<p>以前几乎没有自己好好弄过数据库相关的东西，除了照猫画虎的改过几个表结构，几乎还是一窍不通。今天在组里的workshop上需要从零开始搭建各种环境，跟着组里人学了学使用Flyway来管理数据库。据说它是一个很高大上的数据库管理工具，不过具体高大上在哪里我这只菜鸟还不是很清楚，先来梳理一下它在我们workshop中的用法吧。</p>

<h2><strong>讨厌的配置</strong></h2>

<p>首先当然是进行一堆乱七八糟的配置，是我最讨厌的东西，可是没有办法，必经之路。我们的工程使用maven作为构建工具，所以需要在pom.xml文件中加入flywaydb的插件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.flywaydb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>flyway-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        ....
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码描述了该插件的名字，版本号，以及一些flyway的配置。配置flyway的方式有很多种，我们可以像下面这样pom.xml里面配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;user&gt;</span>myUser<span class="nt">&lt;/user&gt;</span>
</span><span class='line'>        <span class="nt">&lt;password&gt;</span>mySecretPwd<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>        <span class="nt">&lt;schemas&gt;</span>
</span><span class='line'>            <span class="nt">&lt;schema&gt;</span>schema1<span class="nt">&lt;/schema&gt;</span>
</span><span class='line'>            <span class="nt">&lt;schema&gt;</span>schema2<span class="nt">&lt;/schema&gt;</span>
</span><span class='line'>            <span class="nt">&lt;schema&gt;</span>schema3<span class="nt">&lt;/schema&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/schemas&gt;</span>
</span><span class='line'>        <span class="nt">&lt;placeholders&gt;</span>
</span><span class='line'>            <span class="nt">&lt;keyABC&gt;</span>valueXYZ<span class="nt">&lt;/keyABC&gt;</span>
</span><span class='line'>            <span class="nt">&lt;otherplaceholder&gt;</span>value123<span class="nt">&lt;/otherplaceholder&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/placeholders&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以通过一个外部的配置文件来配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>flyway.user=myUser
</span><span class='line'>flyway.password=mySecretPwd
</span><span class='line'>flyway.schemas=schema1,schema2,schema3
</span><span class='line'>flyway.placeholders.keyABC=valueXYZ
</span><span class='line'>flyway.placeholders.otherplaceholder=value123
</span></code></pre></td></tr></table></div></figure>


<p>然后执行mvn时通过指定参数<code>flyway.configFile</code>的值来指定配置文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn -Dflyway.configFile=myConfig.properties
</span></code></pre></td></tr></table></div></figure>


<p>默认的<code>flyway.properties</code>文件和pom.xml在相同的路径下。</p>

<p>另外还可以通过其他方式来指定flyway的配置参数，具体信息可以参加其与maven集成的<a href="http://flywaydb.org/documentation/maven/">相关文档</a>。</p>

<p>我们的工程中使用外部配置文件的方式进行配置，目前的配置文件如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>flyway.user=wjia
</span><span class='line'>flyway.password=
</span><span class='line'>flyway.driver=org.postgresql.Driver
</span><span class='line'>flyway.url=jdbc:postgresql://localhost:5432/wjia
</span><span class='line'>flyway.locations=classpath:db/migration
</span><span class='line'>flyway.sqlMigrationPrefix=V
</span><span class='line'>flyway.sqlMigrationSeparator=__
</span><span class='line'>flyway.sqlMigrationSuffix&gt;=.sql
</span><span class='line'>flyway.encoding=ISO-8859-1
</span><span class='line'>#flyway.baselineVersion=2
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，文件中指定了user，password，driver，url等用来连接数据库的信息。其中<code>flyway.locations</code>指定了sql文件的位置，<code>flyway.sqlMigrationPrefix</code>,
<code>flyway.sqlMigrationSeparator</code>,<code>flyway.sqlMigrationSuffix</code>共同指定了sql文件的命名方式，我们指定的命名方式是以V开头，__作为间隔符，.sql结尾。flyway有一些默认的命名的命名方式，如果不符合规定会造成操作的失败。</p>

<h2><strong>建sql吧</strong></h2>

<p>讨厌的配置完成之后，当然是开始建立数据库迁移任务了，依照上面配置文件中指定的文件路径和命名规则，我们在classpath（resources目录）下的db.migration目录中定义sql文件。例如，我们可以简单的建立一张数据表，然后在表中添加几条记录。</p>

<p>这样resources里面的工程目录就是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>└──resources
</span><span class='line'>  └──db.migration
</span><span class='line'>      └──V1__Create_guest_table.sql
</span><span class='line'>      └──V2__Add_guest.sql
</span></code></pre></td></tr></table></div></figure>


<p>在classpath下的db.migration目录下有两个简单的sql文件。文件内容分别如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>create table Guest (
</span><span class='line'>  id integer constraint pk PRIMARY KEY,
</span><span class='line'>  name varchar(40) not null,
</span><span class='line'>  signingDate date
</span><span class='line'>);
</span><span class='line'>create SEQUENCE guest_id_generator START 10000;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>insert into Guest (ID, NAME,signingDate) values (1, &#39;Axel&#39;, &#39;2015-1-19&#39;);
</span><span class='line'>insert into Guest (ID, NAME,signingDate) values (2, &#39;Mr. Foo&#39;,&#39;2015-1-19&#39;);
</span><span class='line'>insert into Guest (ID, NAME,signingDate) values (3, &#39;Ms. Bar&#39;,&#39;2015-1-19&#39;);
</span></code></pre></td></tr></table></div></figure>


<p>至此我们就有了flyway的配置文件和数据库迁移任务文件，下面就到了flyway发挥作用的时候，看它如何帮助我们来管理数据库吧。</p>

<h2><strong>看flyway如何管理数据库</strong></h2>

<h4><strong>Migrate</strong></h4>

<p>flyway的最重要的功能当然是完成数据库迁移了，使用<code>mvn flyway:migrate</code>命令就可以方便的帮助我们执行<code>flyway.locations</code>目录中定义的migration任务。由于我们的使用了外部的flyway配置文件，因此在执行migration任务时需要加上参数<code>flyway.properties</code>来指定配置文件的位置。所以，在我们的工程中需要执行的任务为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn flyway:migrate -Dflyway.configFile=localPath/flyway.properties
</span></code></pre></td></tr></table></div></figure>


<p>
其中<code>localPath/</code>为<code>flyway.properties</code>文件在本地的路径。执行完该任务后,就生成了我们需要的guest表，并生成了三条数据。查询数据库，可以得到以下表结构和数据：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_flyway/table.jpg" alt="" /></p>

<h4><strong>Clean</strong></h4>

<p>如果我们想初始化数据库，删除所有的表和数据，那么只需要执行命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn flyway:clean
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Info</strong></h4>

<p>如果我们想知道所有migration的详细信息，可以通过执行下面命令来打印信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn flyway:info
</span></code></pre></td></tr></table></div></figure>


<p>执行之后，Terminal中会打印出所有migration的详细信息，其中包括版本号，描述，执行时间，以及状态，具体信息如下图所示：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_flyway/info.jpg" alt="" /></p>

<h4><strong>更多命令</strong></h4>

<p>flyway还提供了更多命令来帮助我们管理数据库。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn flyway:validate
</span></code></pre></td></tr></table></div></figure>


<p>用来validate已经执行的migration任务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn flyway:baseline
</span></code></pre></td></tr></table></div></figure>


<p>用来回滚数据库到一个配置文件中设定好的baseline。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn flyway:repair
</span></code></pre></td></tr></table></div></figure>


<p>用来删除执行失败的migration任务。</p>

<p>更多关于flyway的详细用法，请参见其<a href="http://flywaydb.org/documentation/">官方文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何Mock静态方法]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2015/01/07/mockjing-tai-fang-fa/"/>
    <updated>2015-01-07T21:06:40+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2015/01/07/mockjing-tai-fang-fa</id>
    <content type="html"><![CDATA[<p>最近为客户一堆没有单元测试的代码补测试时，遇到了一堆奇葩的问题，其中一个是被测函数需要调用另外一个类中的静态方法。今天看几个同事讨论说这种写法不好，但是whatever，谁又能完全在理想状态下生存，现有的系统就是这样，测试总得写的吧。</p>

<p>那么我们的解决方法就是使用PowerMock将这些静态方面mock掉。怎么做的呢，通过下面的小例子说明一下。</p>

<p>假如我们有这样一个类EmployeeService需要测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmployeeService</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getEmployeeCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Employee</span><span class="o">.</span><span class="na">count</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，这个类中有一个函数<code>getEmployeeCount()</code>，它里面调用了类<code>Employee</code>中的<code>count()</code>函数。需要测试的类是<code>EmployeeService</code>，那么自然不应该调用真实的类<code>Employee</code>。如何mock该类呢，我们可以使用PowerMock。</p>

<p>测试的实现代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">PowerMockRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmployeeServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Test</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldReturnTheCountOfEmployeesUsingTheDomainClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">PowerMockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">900</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">EmployeeService</span> <span class="n">employeeService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EmployeeService</span><span class="o">();</span>
</span><span class='line'>      <span class="n">assertEquals</span><span class="o">(</span><span class="mi">900</span><span class="o">,</span><span class="n">employeeService</span><span class="o">.</span><span class="na">getEmployeeCount</span><span class="o">());</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，测试代码的顶部使用了两个annotation（<code>@RunWith</code>和<code>@PrepareForTest</code>），在测试实现中使用了<code>PowerMockito</code>。其中<code>@RunWith(PowerMockRunner.class)</code>告诉JUnit使用PowerMockRunner执行该测试。<code>@PrepareForTest(Employee.class)</code>告诉PowerMock类<code>Employee</code>是测试中需要用到的类。当我们需要mock一个final类，或需要mock的类中有final、static、private方法时，需要用到<code>@PrepareForTest</code>。<code>PowerMockito.mockStatic(Employee.class)</code>告诉PowerMock我们需要mock类Employee中所有的静态方法。<code>PowerMockito.when(Employee.count()).thenReturn(900)</code>，很显然，这句话就是告诉PowerMock当执行<code>Employee.count()</code>时，返回900。很显然，我们需要assert的是<code>employeeService.getEmployeeCount()</code>的返回值是不是等于900。至此，该测试就算完成了。</p>

<p>但是，如果<code>EmployeeService</code>中有一个函数需要调用一个返回值为void的静态方面，我们又该如何处理。比如，<code>EmployeeService</code>s中有这样一个方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">giveIncrementToAllEmployeesOf</span><span class="o">(</span><span class="n">intpercentage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">try</span><span class="o">{</span>
</span><span class='line'>      <span class="n">Employee</span><span class="o">.</span><span class="na">giveIncrementOf</span><span class="o">(</span><span class="n">percentage</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实<code>Employee.giveIncrementOf(percentage)</code>是一个返回值为void的静态方法。</p>

<p>测试代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldReturnTrueWhenIncrementOf10PercentageIsGivenSuccessfully</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">PowerMockito</span><span class="o">.</span><span class="na">doNothing</span><span class="o">().</span><span class="na">when</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Employee</span><span class="o">.</span><span class="na">giveIncrementOf</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">EmployeeService</span> <span class="n">employeeService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EmployeeService</span><span class="o">();</span>
</span><span class='line'>      <span class="n">assertTrue</span><span class="o">(</span><span class="n">employeeService</span><span class="o">.</span><span class="na">giveIncrementToAllEmployeesOf</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Test</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shouldReturnFalseWhenIncrementOf10PercentageIsNotGivenSuccessfully</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">PowerMockito</span><span class="o">.</span><span class="na">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Employee</span><span class="o">.</span><span class="na">giveIncrementOf</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">EmployeeService</span> <span class="n">employeeService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EmployeeService</span><span class="o">();</span>
</span><span class='line'>      <span class="n">assertFalse</span><span class="o">(</span><span class="n">employeeService</span><span class="o">.</span><span class="na">giveIncrementToAllEmployeesOf</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到该测试中使用了<code>PowerMockito.doNothing()</code>和<code>PowerMockito.doThrow()</code>。其中<code>PowerMockito.doNothing().when(Employee.class)</code>告诉PowerMock当调类<code>Employee</code>时啥也不要干，而<code>PowerMockito.doThrow(new IllegalStateException()).when(Employee.class)</code>则表示实际调用类Employee时抛一个异常。这样，我们的两个测试就覆盖了<code>giveIncrementToAllEmployeesOf()</code>方法的正常和异常两个方面，测试完成。</p>

<p>另外，如果我们使用<code>PowerMockito.mockStatic(Employee.class)</code>mock了Employee的所有静态方法，但是我们又想在测试中真实的调用某个其中一个方法，那么就可以使用<code>PowerMockito.when(...).thenCallRealMethod()</code>，例如我们想调用count的真实方法，就可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PowerMockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">Employee</span><span class="o">.</span><span class="na">count</span><span class="o">()).</span><span class="na">thenCallRealMethod</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多关于PowerMock，请参见<a href="https://code.google.com/p/powermock/">官方文档</a>。例子中的详细代码，请参见<a href="https://github.com/jiamaoweilie/MockingStaticMothod">我的github</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伪元素的使用]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/11/26/before-and-after/"/>
    <updated>2014-11-26T21:29:58+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/11/26/before-and-after</id>
    <content type="html"><![CDATA[<p>之前在学习CSS VOCABULARY的时候看到过有关伪元素的知识，知道它可以方便开发，但是具体用途和用法并没有真正掌握。最近有机会再次接触，对其用途有了一些新认识。</p>

<h2>完美的画个衬线</h2>

<p>在写页面的时候经常会遇到下图所示的情况，需要在一个标题或一段文字的下方显示一条定长的衬线。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_before_after/how-it-works.png" alt="" /></p>

<p>我们可以通过给该元素的下面加另一个元素，然后设置一些样式来实现这种效果。但是如果使用伪元素就可以在不添加任何额外元素的情况下方便的画出这条衬线。</p>

<p>假设，有这样一个标题需要设置上图所示的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">h2</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="nt">HOW</span> <span class="nt">IT</span> <span class="nt">WORKS</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>  
</span></code></pre></td></tr></table></div></figure>


<p>我们来看看如何使用伪元素来为该标题设置样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">h2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="nb">gray</span><span class="o">-</span><span class="nb">black</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&amp;::</span><span class="n">after</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">35px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">39</span><span class="o">,</span> <span class="m">39</span><span class="o">,</span> <span class="m">43</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">-23px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，我们将元素本身的<code>position</code>设为<code>relative</code>，然后将其伪元素after的<code>positon</code>设为<code>absolute</code>，这样after的位置就相对于其父元素是绝对位置，我们可以通过设置它的<code>top</code>，<code>left</code>，或者<code>right</code>属性来调整它的位置。上面代码中设定该元素的<code>width</code>为<code>50px</code>,<code>height</code>为<code>30px</code>，并设置了<code>background-color</code>，这样它的样子就是一条长<code>50px</code>，高<code>3px</code>的线。我们再让其<code>left</code>等于<code>50%</code>，<code>top</code>等于<code>35px</code>，它就会位于其父元素上边框下方35px处，并居中。至此，我们就实现了上图所示的衬线效果。</p>

<h2>让这些圈圈优雅的连起来</h2>

<p>下面这张图也是页面上的一个常见情况，一些元素从中间被一条线连起来，像糖葫芦一样这条线在图片的中间。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_before_after/numbers.png" alt="" /></p>

<p>同样，我们可以使用伪元素实现这条线。假设有下面一段代码需要实现上图的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">h2</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;number first&quot;</span><span class="o">&gt;</span><span class="nt">1</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;description&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">i</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;fa fa-list-alt fa-7x&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">i</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">h2</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;descSummary&quot;</span><span class="o">&gt;</span><span class="nt">Compare</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">Magni</span> <span class="nt">dolores</span> <span class="nt">eoos</span> <span class="nt">qui</span> <span class="nt">retione</span> <span class="nt">voluptatem</span> <span class="nt">sequi</span> <span class="nt">nesciunt</span> <span class="nt">neque</span> <span class="nt">porro</span> <span class="nt">quisquam</span> <span class="nt">est</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">h2</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;number&quot;</span><span class="o">&gt;</span><span class="nt">2</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;description&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">i</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;fa fa-pencil fa-7x&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">i</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">h2</span><span class="o">&gt;</span><span class="nt">Receive</span> <span class="nt">Proposals</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">Magni</span> <span class="nt">dolores</span> <span class="nt">eoos</span> <span class="nt">qui</span> <span class="nt">retione</span> <span class="nt">voluptatem</span> <span class="nt">sequi</span> <span class="nt">nesciunt</span> <span class="nt">neque</span> <span class="nt">porro</span> <span class="nt">quisquam</span> <span class="nt">est</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">h2</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;number&quot;</span><span class="o">&gt;</span><span class="nt">3</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;description&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">i</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;fa fa-users fa-7x&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">i</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">h2</span><span class="o">&gt;</span><span class="nt">Sell</span> <span class="nt">with</span> <span class="nt">the</span> <span class="nt">Best</span><span class="o">&lt;/</span><span class="nt">h2</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">Magni</span> <span class="nt">dolores</span> <span class="nt">eoos</span> <span class="nt">qui</span> <span class="nt">retione</span> <span class="nt">voluptatem</span> <span class="nt">sequi</span> <span class="nt">nesciunt</span> <span class="nt">neque</span> <span class="nt">porro</span> <span class="nt">quisquam</span> <span class="nt">est</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">ul</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们只关注于数字和其衬线部分的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">33.33%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">number</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="err">$</span><span class="k">border-color</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="k">line-height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="nb">gray</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="err">$</span><span class="k">background-color</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.number</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">right</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">2px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="err">$</span><span class="k">border-color</span><span class="p">;</span>
</span><span class='line'>    <span class="k">z-index</span><span class="o">:</span> <span class="m">-1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nc">.first</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，每个<code>li</code>向左浮动，并且宽度为33.33%，这样这三个数字就可以平均分布在页面中的一行。然后为数字元素设置了宽和高都是<code>60px</code>，并让其<code>border-radius</code>为50%，设置边框之后，三个圆圈就实现了。我们设置数字元素的<code>position</code>为<code>relative</code>，其伪元素before的<code>position</code>为<code>absolute</code>，然后设置其<code>top</code>为圆圈半径，<code>right</code>为<code>50%</code>，<code>width</code>为<code>100%</code>，这样我们就成功的在这些圈圈中间画了一条线。但是这样下来，你会发现第一个元素不需要有这条线，而且线有可能跑到圈圈里面。别着急，我们可以让第一个数字的伪元素不显示，并给圆圈设置一个背景色来覆盖其里面多余的线。</p>

<h2>立体的阴影也没有多麻烦</h2>

<p>看到下面这几个图标，很多人想必跟我一样一头雾水，不知其然也不知其所以然。后来经过研究，虽不知其完美的实现方法，但是发现使用伪元素可以实现如图效果。</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_before_after/cycle.png" alt="" /></p>

<p>先来看看我的html代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;like&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon-heart&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;trash&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon-trash&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;continue&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon-play&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>   
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;sync&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon-arrow-sync&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;fast-forward&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon-media-fast-forward&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">ul</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设这些<code>icon</code>是我的音乐播放器里面的link，我需要让它们变成上图所示的样子。这里的icon采取<a href="https://icomoon.io/">icomoon</a>里面的字体。</p>

<p>其样式代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">li</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">10%</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span> <span class="err">{</span>
</span><span class='line'>      <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>      <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>      <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>      <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>      <span class="k">line-height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">font-size</span><span class="o">:</span> <span class="m">4em</span><span class="p">;</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">height</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>      <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>      <span class="k">color</span><span class="o">:</span> <span class="err">$</span> <span class="k">font</span><span class="o">-</span><span class="nb">gray</span><span class="o">-</span><span class="k">color</span><span class="p">;</span>
</span><span class='line'>      <span class="k">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>      <span class="o">@</span><span class="n">include</span> <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="p">(</span><span class="n">rgba</span><span class="p">(</span><span class="nb">black</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">)</span><span class="m">0</span> <span class="m">0</span> <span class="m">20</span> <span class="k">px</span><span class="p">);</span>
</span><span class='line'>      <span class="o">&amp;::</span><span class="n">after</span> <span class="err">{</span>
</span><span class='line'>        <span class="k">z-index</span><span class="o">:</span> <span class="m">-100</span><span class="p">;</span>
</span><span class='line'>        <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>        <span class="k">width</span><span class="o">:</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">height</span><span class="o">:</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">right</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">top</span><span class="o">:</span> <span class="m">-10px</span><span class="p">;</span>
</span><span class='line'>        <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>        <span class="k">background-color</span><span class="o">:</span> <span class="n">rgba</span><span class="p">(</span><span class="err">$</span> <span class="k">font</span><span class="o">-</span><span class="nb">gray</span><span class="o">-</span><span class="k">color</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过代码可以看到，我们给<code>a</code>元素设置了一定的宽、高、边框、阴影，并通过<code>after</code>在其下面画一个比它本身的直径大<code>20px</code>的圆，这样二者重叠起来就是一个完美的有阴影的图标。</p>

<p>当然，伪元素的用法远不止这些，我们以后再慢慢研究吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Gulp简化开发]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/10/26/gulp/"/>
    <updated>2014-10-26T20:15:02+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/10/26/gulp</id>
    <content type="html"><![CDATA[<p><a href="http://gulpjs.com/">Gulp</a>是一个轻量级的前端构建工具，它用来自动执行项目开发过程中遇到的许多耗时又无聊（但是非常重要）的任务，这些任务包括运行测试、拼接文件、精简文件以及CSS预处理。通过简单的创建一个任务文件，可以指示Gulp来自动运行一些开发中的任务，节省时间可以使你专注于开发本身。</p>

<h2>安装Gulp</h2>

<p>Gulp是基于Node.js的构建工具，安装Gulp之前必须安装<a href="http://nodejs.org/">Node.js</a>。在Mac中安装Node.js的方法非常简单。</p>

<p>如果使用homebrew，可以直接通过以下命令安装：</p>

<pre><code>$ brew install node
</code></pre>

<p>如果没有则可以下载安装包，并按照说明安装。</p>

<p>为了确保Node.js已经正确安装，可以执行几个简单的命令。</p>

<pre><code>$ node -v
</code></pre>

<p>如果安装正确，可以看到Node.js的版本号。</p>

<pre><code>v0.10.29
</code></pre>

<p>再来验证下npm：</p>

<pre><code>$ npm -v
</code></pre>

<p>同样，如果安装正确，可以看到npm的版本号：</p>

<pre><code>1.4.16
</code></pre>

<p>Node.js安装成功之后，可以使用npm来方便的安装Gulp：</p>

<pre><code>$ sudo npm install -g gulp 
</code></pre>

<p>其中，<code>npm</code>是安装node包的工具；<code>-g</code>表示在全局环境安装，以方便其他项目使用。安装成功后同样可以使用<code>gulp -v</code>命令查看Gulp的版本号，确保已经被成功安装。</p>

<p>接下来我们需要在本地项目中安装Gulp：</p>

<pre><code>$ npm install —-save-dev gulp
</code></pre>

<p>其中，<code>--save-dev</code>用来更新package.json文件，更新<code>devDependencies</code>值，以表明项目需要依赖Gulp。<code>Dependencies</code>可以向其他参与项目的人指明项目在开发环境和产品环境中的node模块依懒关系.更多关于此的问题，可以参见<a href="https://www.npmjs.org/doc/files/package.json.html#dependencies">package.json文档</a>。</p>

<h2>使用Gulp</h2>

<p>安装成功之后，我们来看看如何使用Gulp。</p>

<p>Gulp运行时，会在当前目录中查找gulpfile.js文件，并执行该文件中的内容。因此，使用Gulp的第一步是创建一个名为gulpfile.js的文件，然后再里面定义我们需要Gulp执行的任务。例如，我们先来定义一个Gulp的默认任务：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>gulp.task()</code>函数通常用来定义任务，例如上面代码中定义了一个default任务，该任务用来打印一个字符串。定义好该文件之后，可以通过在命令行中输入<code>gulp</code>命令来执行default任务，命令行中会输出如下结果：</p>

<pre><code>[22:21:06] Using gulpfile ~/WorkShops/homework/gulp/gulpfile.js
[22:21:06] Starting 'default'...
Hello world!
[22:21:06] Finished 'default' after 103 μs
</code></pre>

<p>知道Gulp的运行机制后，我们来看看如何使用Gulp帮助我们简化开发工作。例如，我们不想在产品环境中向用户暴露未压缩的源码，就可以使用Gulp来合并并且压缩所有.js文件为一个大文件。</p>

<p>首先，我们需要安装相应的插件:</p>

<pre><code>$ npm install -–save-dev gulp-concat gulp-ugligfy gulp-rename
</code></pre>

<p>其中<code>gulp-concat</code>插件用来合并文件，<code>gulp-ugligfy</code>插件用来压缩文件，<code>gulp-rename</code>用来重命名文件。安装成功之后，需要更新gulpfile.js文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">concat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">rename</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-rename&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;scripts&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./js/*.js&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">concat</span><span class="p">(</span><span class="s1">&#39;all.js&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;./dist&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">rename</span><span class="p">(</span><span class="s1">&#39;all.min.js&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;./dist&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义好task之后，可以使用<code>gulp scripts</code>命令来执行该task。</p>

<p>通过代码可以看出，该任务首先会找到js目录下的所有.js文件，将其合并为一个名为all.js文件，然后将其放置来dist目录下，并重命名为all.min.js，最后将这个文件压缩,并保存在dist目录下的all.min.js文件中。在该task下定义的子任务通过pipe连接起来，当数据从管道的前一个节点流出之后，会流入下一个节点，而且数据在此过程中并不会写入中间文件，也就是说中间文件all.js最后并不会存在。</p>

<p>可以通过以下流程描述Gulp中task的执行方式:</p>

<pre><code>读文件 ==&gt; 子任务1 ==&gt; 子任务2 ==&gt; 子任务3 ===》··· ==&gt; 子任务N ==&gt; 写文件
</code></pre>

<p>与Grunt（使用文件，对文件执行单个任务然后保存到新的文件中，每个任务都会重复执行所有进程，文件系统频繁的处理任务会导致Grunt的运行速度比Gulp慢。）相比，Gulp的主要优势在于数据流操作，通过这种方式可以减小文件的读写工作，提高效率。更多关于数据流的知识，可以参见<a href="https://github.com/substack/stream-handbook">Stream Handbook</a>。Gulp的另一个优势是符合程序员的阅读习惯，通过代码，我们可以很轻松的看到该任务执行的主要内容。</p>

<p>如果我们需要Gulp帮我们来检查Javascript文件的格式，也可以定义一个类似的task。 首先需要安装用于检查格式的插件<code>gulp-jshint</code>：</p>

<pre><code>$ npm install gulp-jshint 
</code></pre>

<p>然后定义一个名为<code>lint</code>的task：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">jslint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-jslint&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">src</span><span class="p">([</span>
</span><span class='line'>            <span class="s1">&#39;./app/scripts/controllers/**/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;./app/scripts/services/**/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;./app/scripts/main.js&#39;</span>
</span><span class='line'>        <span class="p">])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">(</span><span class="s1">&#39;.jshintrc&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过代码可以看出，该task会检查多个目录下的.js文件，并且执行检查其格式，然后使用reporter生成报告。</p>

<p>.jshintrc文件是一个定义jslint检查规则的文件，文件内容通常如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;node&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;browser&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;esnext&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;bitwise&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;camelcase&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;curly&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;eqeqeq&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;immed&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;indent&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;latedef&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;newcap&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;noarg&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;quotmark&quot;</span><span class="o">:</span> <span class="s2">&quot;single&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;regexp&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;undef&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;unused&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;strict&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;trailing&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;smarttabs&quot;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;predef&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;describe&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;expect&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;it&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;beforeEach&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;inject&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;jasmine&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;jQuery&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;spyOn&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;afterEach&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义好task之后，执行命令<code>gulp lint</code>就可以看到检查结果：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_gulp/error-right.png" alt="" /></p>

<p>从图中可以看到jslint帮我们找到了很多代码中的格式错误，等修复了这些错误之后，重新执行<code>gulp lint</code>命令，就不会报错了：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_gulp/noerror.png" alt="" /></p>

<p>如果我们需要在一个task中执行多个之前定义的task，则可以像下面这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;scripts&#39;</span><span class="p">,</span> <span class="s1">&#39;copy&#39;</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在build命令中，我们执行了多个task，例如test，lint，scripts等。</p>

<p>类似的，Gulp还可以帮我们做很多事情，它有超过600种插件可以供开发者选择。你可以在<a href="http://gulpjs.com/plugins/">插件页面</a>或者npm上搜索gulpplugin来浏览插件列表，然后定义更多的task来简化我们的开发工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava Optional]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/09/09/guava-optional/"/>
    <updated>2014-09-09T21:30:16+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/09/09/guava-optional</id>
    <content type="html"><![CDATA[<p>兜兜转转，又开始拾起这篇曾经放弃了几百次的文章。时隔一个多月，依然清晰的记得第一次写完那个例子时，被某大师问了几个问题后尴尬地想撞墙的心情。查阅了一些乱七八糟的资料，试图找到一些能够帮我理解的例子，但未果，我糊涂的大脑还是无法理解这个奇葩的存在。直到某天，得到点化，似乎有了一些理解（很多疑问还在），希望写完不要被杀。</p>

<p>先说一说为什么要用<a href="https://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Guava Optional</a>吧. Google的官方文档中说，它是用来避免使用null的，而且Google的code base中大约95%的collection中不该含有null值。看到这里，我不禁郁闷，null到底是一个什么样令人深恶痛绝的东西，令他们欲除之而后快。</p>

<p>看看他们是怎么解释的吧。文档中说，null之所以令人讨厌，最主要的原因是其<strong>含义模糊</strong>。比如，当Map.get(key)返回null时，可能是因为Map中的值为null，也有可能是Map中没有对应的值。null可以表示失败，可以表示成功，可以表示任何事情，所以如果要想表达的意思比较清晰，就要避免使用null。这样看着似乎是很有道理，那就这么着吧，在使用Map的时候不要把null作为key传入。可是该用什么呢？<code>Optional.absent()</code>呗。</p>

<p>可是<code>Optional.absent()</code>到底是个什么呢？其实它就是Optional提供的一个表示不存在的符号。Optional是一种使用非空值代替可以为空的值的方式，它可能存在（isPresent为ture），也可能不存在。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">possible</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="n">possible</span><span class="o">.</span><span class="na">isPresent</span><span class="o">();</span> <span class="c1">// returns true</span>
</span><span class='line'><span class="n">possible</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> <span class="c1">// returns 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了上面说的方式外，什么时候使用Optional合适呢？ 看了一堆例子，大多像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GoogleGuavaOptionalExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Optional</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">fromNull</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">getList</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">fromNull</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// do something</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看完这个例子，估计我们的内心都不禁呐喊，这是个啥啊！！！！那我用其他方法，判断一下返回值是不是null不也一样（某大师也是这么问我的）。后来发现Optional这家伙主要用于<a href="http://en.wikipedia.org/wiki/Null_Object_pattern">空对象模式(Null Object pattern)</a>。那空对象模式又是什么时候用呢？资料上说它的用法主要有两种：</p>

<ol>
<li>一种是返回集合的时候。</li>
<li>策略模式(Strategy Pattern)或者状态模式(State Pattern)。</li>
</ol>


<p>第一种用法也许说的就是上面的那几行代码中显示的那样。那策略模式又是怎么用呢？从字面意思看，Optional的意思是可选择的，它就是用来表示一个可有可无的东西。例如命令行中的<code>ls</code>命令，它的格式是<code>ls [选项] [目录名]</code>，其中的后两项就是Optional，是可有可无的，如果有的话，会产生一些额外的作用。比如<code>ls -i</code>，会列出每个文件的inode号；<code>ls -l Documents</code>，会列出Documents目录下所有文件的详细信息；如果单纯的使用<code>ls</code>，则直接列出当前目录的的子目录和文件。</p>

<p>遗憾的是这个高大上的例子我没有真正实现，那么就用这个接地气的例子代替吧。</p>

<p><em>话说今日天朗气清，惠风和畅，某大师用自己的午饭推荐神器<a href="http://icodeit.org/2014/09/simple-idea-and-simple-script/">chisha</a>摇出今天中午要吃炒饭，于是来到餐厅愉快的点餐。</em></p>

<p>根据上述需求，我们设计出一个订单类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span>  <span class="n">Food</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span>  <span class="n">OptionalRequirement</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Order</span><span class="o">(</span><span class="n">Food</span> <span class="n">food</span><span class="o">,</span> <span class="n">OptionalRequirement</span> <span class="n">optionalRequirement</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">food</span> <span class="o">=</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">optionalRequirement</span> <span class="o">=</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Food</span> <span class="nf">getFood</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFood</span><span class="o">(</span><span class="n">Food</span> <span class="n">food</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">food</span> <span class="o">=</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">OptionalRequirement</span> <span class="nf">getOptionalRequirement</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOptionalRequirement</span><span class="o">(</span><span class="n">OptionalRequirement</span> <span class="n">optionalRequirement</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">optionalRequirement</span> <span class="o">=</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在设计订单类时，我们加入了一个OptionalRequirement属性，以满足顾客的一些额外需求。如果大师想给炒饭里面额外加个鸡蛋，那就下单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Food</span> <span class="n">friedRice</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Food</span><span class="o">(</span><span class="s">&quot;friedRice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">OptionalRequirement</span> <span class="n">moreEgg</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ExtraEgg</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Order</span><span class="o">(</span><span class="n">friedRice</span><span class="o">,</span> <span class="n">moreEgg</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想多吃点肉，那也很随意：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Food</span> <span class="n">friedRice</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Food</span><span class="o">(</span><span class="s">&quot;friedRice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">OptionalRequirement</span> <span class="n">moreMeat</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ExtraMeat</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Order</span><span class="o">(</span><span class="n">friedRice</span><span class="o">,</span> <span class="n">moreMeat</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>可是天有不测风云，大师今天偏偏啥额外需求也没有，那么这个订单会长成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Food</span> <span class="n">friedRice</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Food</span><span class="o">(</span><span class="s">&quot;friedRice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Order</span><span class="o">(</span><span class="n">friedRice</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，这null具有各自语义不明的缺点，而且可能会造成空指针异常。这时候Optional就可以优雅的出场了，订单类会被改成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span>  <span class="n">Food</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span>  <span class="n">Optional</span><span class="o">&lt;</span><span class="n">OptionalRequirement</span><span class="o">&gt;</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Order</span><span class="o">(</span><span class="n">Food</span> <span class="n">food</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">OptionalRequirement</span><span class="o">&gt;</span> <span class="n">optionalRequirement</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">food</span> <span class="o">=</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">optionalRequirement</span> <span class="o">=</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Food</span> <span class="nf">getFood</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">OptionalRequirement</span><span class="o">&gt;</span> <span class="nf">getRequirementOptional</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFood</span><span class="o">(</span><span class="n">Food</span> <span class="n">food</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">food</span> <span class="o">=</span> <span class="n">food</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRequirementOptional</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">OptionalRequirement</span><span class="o">&gt;</span> <span class="n">optionalRequirement</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">optionalRequirement</span> <span class="o">=</span> <span class="n">optionalRequirement</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>OptionalRequirement</code>就像是命令行中那些可有可无的可选参数，如果有额外要求时，就这么使用如下方法点单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Food</span> <span class="n">friedRice</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Food</span><span class="o">(</span><span class="s">&quot;friedRice&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">OptionalRequirement</span> <span class="n">moreEgg</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ExtraEgg</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Order</span><span class="o">(</span><span class="n">friedRice</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">moreEgg</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果没有其他要求时，就是下面的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Food</span> <span class="n">friedRice</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Food</span><span class="o">(</span><span class="s">&quot;friedRice&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Order</span><span class="o">(</span><span class="n">friedRice</span><span class="o">,</span> <span class="n">Optional</span><span class="o">.&lt;</span><span class="n">OptionalRequirement</span><span class="o">&gt;</span><span class="n">absent</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Optional.&lt;OptionalRequirement&gt;absent()</code>用来表示额外的需求不存在，顾客就需要一碗常规的炒饭就好了。这样就避免了使用null语义不明确的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AngularJS与api集成]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/09/02/angularjs/"/>
    <updated>2014-09-02T21:53:45+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/09/02/angularjs</id>
    <content type="html"><![CDATA[<p>如果我们有一个api提供一些json格式的数据，那么如何使用AngularJS来获取这些数据，又如何将处理过的的数据显示在一个具有responsive特性的页面上？本文将一一描述。</p>

<p>在本文的例子中api提供如下格式的json数组：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[{"first_name": "Kelli", "last_name": "Guiney", "time": "01:00:58"},
</span><span class='line'>{"first_name": "Brett", "last_name": "Cooper", "time": "01:05:35"},
</span><span class='line'>{"first_name": "Felicity", "last_name": "White", "time": "01:07:15"},
</span><span class='line'>{"first_name": "Monty", "last_name": "Hamilton", "time": "01:08:05"},
</span><span class='line'>{"first_name": "Sarah", "last_name": "Battwraden", "time": "01:11:03"},
</span><span class='line'>{"first_name": "Bob", "last_name": "Reynolds", "time": "01:11:37"},
</span><span class='line'>{"first_name": "Mike", "last_name": "Baxter", "time": "01:14:14"},
</span><span class='line'>{"first_name": "Terry", "last_name": "Gillespie", "time": "01:14:15"},
</span><span class='line'>{"first_name": "Chris", "last_name": "Ford", "time": "01:22:27"},
</span><span class='line'>{"first_name": "Sunil", "last_name": "Samarasinghe", "time": "01:24:24"},
</span><span class='line'>{"first_name": "Dan", "last_name": "Martin", "time": "01:25:29"}]</span></code></pre></td></tr></table></div></figure>


<p>最终要求是将前十个元素以下图的样式显示的页面上：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_angularjs_demo/showresult.png" alt="" width="70%"></p>

<p>并且这个页面具有<a href="http://en.wikipedia.org/wiki/Responsive_web_design">responsive</a>特性，即当使用其他屏幕尺寸不同的设备时，其样式会有相应的变化。在手机上显示的结果如下图所示：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_angularjs_demo/phone.png" alt="" width="30%" /></p>

<h1>设计一个responsive的表格</h1>

<p><a href="http://getbootstrap.com/">Bootstrap</a>是Twitter推出的一个开源的用于前端开发的工具包。它是一个简洁、直观、强悍的前端开发框架，使用它可以很容易的设计出一个具有responsive特性的页面。在使用Bootstrap设计页面之前，需要在hmtl中引入它的<code>bootstrap.css</code>、<code>jquery.js</code>和<code>bootstrap.js</code>文件（Bootstrap是基于JQuery开发的，所以必须引入）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们的例子使用Bootstrap来设计一个表格，以展示后台提供的json数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;table-responsive&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;LeaderBoardController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table table-box&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;table-header &quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th</span> <span class="na">width=</span><span class="s">&quot;50px&quot;</span> <span class="na">class=</span><span class="s">&quot;text-center&quot;</span><span class="nt">&gt;</span>RANK<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th&gt;</span>NAME<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>            <span class="nt">&lt;th</span> <span class="na">width=</span><span class="s">&quot;120px&quot;</span> <span class="na">class=</span><span class="s">&quot;text-center text-nowrap&quot;</span><span class="nt">&gt;</span>TIME<span class="nt">&lt;span</span> <span class="na">style=</span><span class="s">&quot;color:#98ACE1&quot;</span><span class="nt">&gt;</span>(HH:MM:SS)<span class="nt">&lt;/span&gt;&lt;/th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tbody</span> <span class="na">id=</span><span class="s">&quot;items&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items | limitTo:10 &quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;text-center&quot;</span><span class="nt">&gt;</span>{ {$index + 1} }<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;text-left text-ellipsis&quot;</span><span class="nt">&gt;</span>{ {item.first_name} } { {item.last_name} }<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td</span> <span class="na">class=</span><span class="s">&quot;text-center text-nowrap&quot;</span> <span class="na">style=</span><span class="s">&quot;min-width:100px&quot;</span><span class="nt">&gt;</span>{ {item.time} }<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码看来这个<code>table</code>似乎也没有什么神奇的地方，怎么就能自适应各种页面显示呢，答案其实就在<code>class="table-responsive"</code>。引入Bootstrap之后，可以通过使用它预设的一些class来实现我们想要的效果。比如本例中的<code>table-responsive</code>说明这个<code>div</code>里面的<code>table</code>具有responsive的特性。更多关于table的设置，请参见<a href="http://getbootstrap.com/css/#tables">官方文档</a>。</p>

<h1>显示api提供的数据</h1>

<p>读上面一段代码时，我们会发现里面有一些类似于<code>ng-controller="LeaderBoardController"</code>，<code>{ {$index + 1} }</code>的奇怪东西。它们就是AngularJS中的一些标示符，用来帮助我们和页面交互。<a href="https://angularjs.org/">AngularJS</a>诞生于Google,是一款优秀的前端JS框架，已经被用于Google的多款产品当中。它有着诸多特性，最为核心的是：MVC、模块化、自动化双向数据绑定、语义化标签、依赖注入，等等。使用AngularJS时必须首先引入<code>angular.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们的例子中使用AngularJS作为前端框架，来和后端的api交互。上面<code>html</code>代码中的<code>ng-controller="LeaderBoardController"</code>定义了一个Controller，用以响应与api交互的事件。<code>ng-repeat="item in items | limitTo:10 "&gt;</code>表示repeat它所在的DOM并用元素<code>items</code>里面的值来填充DOM需要的值，并限制repeat次数为10。<code>{ {$index + 1} }</code>表示输出当前编号（<code>$index</code>是其索引值，从0开始），<code>{ {item.first_name} }</code>表示输出<code>item</code>的<code>fist_name</code>属性，其他与前面类似。</p>

<p>Controller的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;LeaderBoardApp&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;LeaderBoardController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;LeaderBoardService&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">LeaderBoardService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">LeaderBoardService</span><span class="p">.</span><span class="nx">getLeaderBoardData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>            <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码首先定义了一个AngularJS的模块，模块名称为<code>LeaderBoardApp</code>，然后定义了一个名为<code>LeaderBoardController</code>的Controller。很容易看出，这个Controller的作用是调用<code>LeaderBoardService</code>的<code>getLeaderBoardData()</code>函数，并将获取的数据传给<code>$scope.items</code>。此处的<a href="https://docs.angularjs.org/guide/scope"><code>$scope</code></a>是AngularJS的内置服务,当服务被找到并加载之后，执行匿名函数将其传入。比如此处，当AngularJS解析页面时，会动态的创建一个scope, 并将它的属性items设为<code>getLeaderBoardData()</code>函数返回的值，这样页面就可以获取到Controller得到的数据。</p>

<p><code>LeaderBoardService</code>是AngularJS中的Service，用于与后台交互，它的定义与Controller相似：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;LeaderBoardApp&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;LeaderBoardService&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="s1">&#39;$q&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">getLeaderBoardData</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;http://test/api&quot;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>factory是AngularJS支持的Service定义的一种。从代码可以看出Service名字为<code>LeaderBoardService</code>，它依赖于<a href="https://docs.angularjs.org/api/ng/service/$http"><code>$http</code></a>服务和<a href="https://docs.angularjs.org/api/ng/service/$q"><code>$q</code></a>服务。<code>$http</code>服务用于向后台发送请求，并获取相应，例如例子中的代码向一个URL发送了一个get请求。$q可以用来创建以defer对象，defer有两个状态：resolve和reject。这里的$http不直接返回异步操作的结果，而是返回一个对defer对象的引用。这样就使用上例中<code>LeaderBoardController</code>里面的方法一样处理这个Service返回的结果了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">LeaderBoardService</span><span class="p">.</span><span class="nx">getLeaderBoardData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，我们已经可以从将后台api提供的数据显示在页面上了。如果此时我们有一个新的需求：因为后台的api提供的数据是变化的，所以我们需要每隔30秒刷新一次数据，即每隔30秒调用一次<code>LeaderBoardService.getLeaderBoardData()</code>。这时候就需要用到AngularJS的另一个服务<a href="https://docs.angularjs.org/api/ng/service/$interval"><code>$interval</code></a>。
代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;LeaderBoardApp&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;LeaderBoardController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;LeaderBoardService&#39;</span><span class="p">,</span> <span class="s1">&#39;$interval&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">LeaderBoardService</span><span class="p">,</span> <span class="nx">$interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">refresh</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$interval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">refresh</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">30000</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">refresh</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">LeaderBoardService</span><span class="p">.</span><span class="nx">getLeaderBoardData</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>                <span class="kd">function</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先需要像使用<code>$scope</code>那样，将<code>$interval</code>作为参数传给Controller，然后设置间隔时间为30000毫秒，无限重复，这样就会每隔30秒执行一遍refresh函数，刷新一遍页面。自此我们的需求也就初步实现。</p>

<p>更多关于AngularJS的用法，请参见<a href="https://docs.angularjs.org/api">官方文档</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bulid a Todo List Example With Spring Boot]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/08/10/bulid-a-todo-list-example-with-spring-boot/"/>
    <updated>2014-08-10T17:00:16+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/08/10/bulid-a-todo-list-example-with-spring-boot</id>
    <content type="html"><![CDATA[<p><a href="http://projects.spring.io/spring-boot/">Spring Boot</a>利用JavaConfig的配置模式以及“约定优于配置”的理念，能够极大的简化基于Spring MVC的Web应用和REST服务开发。使用Spring Boot能够很容易的创建独立的Spring应用程序，它直接嵌入Tomcat或者Jetty，不需要部署WAR文件，不需要XML文件，能够简化配置，极大的方便用户来快速创建一个应用程序。下面我将介绍如何使用Spring Boot创建一个简单的RESTful API。这个例子是一个简单的todo list，可以实现对todo list的增删查改。例如：</p>

<h4>运行程序：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring-boot:run</span></code></pre></td></tr></table></div></figure>


<h4>增加一条todo：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X "POST" -v localhost:8080/todos -H "Content-Type: application/json" -d '{"description":"This is a todo."}'</span></code></pre></td></tr></table></div></figure>


<h4>查询所有的todo：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X "GET" -v localhost:8080/todos</span></code></pre></td></tr></table></div></figure>


<h4>删除一条todo：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X "DELETE" -v localhost:8080/todos/1</span></code></pre></td></tr></table></div></figure>


<h4>修改一条todo：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X "PUT" -v localhost:8080/todos/2 -H "Content-Type: application/json" -d '{"description":"Modified Todo"}'</span></code></pre></td></tr></table></div></figure>


<p>在这个例子中，我们使用Spring Date JPA处理数据，使用mysql存储数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "id": 1,
</span><span class='line'>    "description": "A Todo"
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "id": 2,
</span><span class='line'>    "description": "Study Spring Boot. "
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<h2>创建文件结构</h2>

<p>可以使用<a href="http://start.spring.io/">Spring Initializr</a>来帮助你快速创建出本工程的文件结构和POM.xml文件，也可以手动创建。创建完成后，本例子的文件结构如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>└──src
</span><span class='line'>  └──main
</span><span class='line'>      └──java
</span><span class='line'>          └──todos
</span><span class='line'>          └──resources</span></code></pre></td></tr></table></div></figure>


<h2>pom.xml</h2>

<p>工程创建成功之后，需要添加pom.xml文件（如果使用Spring Initializr会自动生成pom.xml文件，只需要做一些修改即可），本例的pom.xml文件内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;parent&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.1.4.RELEASE<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/parent&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>5.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;start-class&gt;</span>todos.Application<span class="nt">&lt;/start-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>2.3.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>    <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Spring Releases<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url&gt;</span>http://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'>    <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id&gt;</span>org.jboss.repository.releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>JBoss Maven Release Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url&gt;</span>https://repository.jboss.org/nexus/content/repositories/releases<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pluginRepositories&gt;</span>
</span><span class='line'>    <span class="nt">&lt;pluginRepository&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id&gt;</span>spring-releases<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Spring Releases<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url&gt;</span>http://repo.spring.io/libs-release<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/pluginRepository&gt;</span>
</span><span class='line'><span class="nt">&lt;/pluginRepositories&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的配置中，需要将工程的parent被设置为spring-boot-starter-parent，并添加对spring-boot-starter-web，spring-boot-starter-data-jpa，mysql-connector-java的依赖。spring-boot-starter-parent会继承一些默认的依赖，这样的设置之后就无需添加一堆相应的依赖，能够将依赖配置最小化；spring-boot-starter-web提供了对web的支持；spring-boot-starter-data-jpa提供了对数据的支持；mysql-connector-java提供了和后台mysql数据库连接的支持。在构建中要声明使用spring-boot-maven-plugin这个插件，它会对Maven打包形成的JAR进行二次修改，最终产生符合我们要求的内容结构，并且可以直接使用mvn spring-boot: run运行应用程序。</p>

<h2>实体</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">todos</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.persistence.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">uniqueConstraints</span> <span class="o">=</span> <span class="o">{</span> <span class="nd">@UniqueConstraint</span><span class="o">(</span><span class="n">columnNames</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;id&quot;</span> <span class="o">})</span> <span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Todo</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">description</span> <span class="o">=</span> <span class="n">description</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">description</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用@Entity表明该实体为JPA实体，它包含id和description两个属性，其中id为自动生成，其结构对应于数据库中Todo表。创建完成后，我们就可以利用此实体方便的进行操作。</p>

<h2>Controller</h2>

<p>拥有Todo这个实体之后，我们需要一个Controller来响应实体的请求：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">todos</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestBody</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">bind</span><span class="o">.</span><span class="na">annotation</span><span class="o">.</span><span class="na">RequestMethod</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/todos&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TodoController</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">TodoService</span> <span class="n">todoService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Todo</span><span class="o">&gt;</span> <span class="nf">showTodoList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoService</span><span class="o">.</span><span class="na">findAllList</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/{id}&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Todo</span> <span class="nf">showATodo</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Todo</span> <span class="nf">create</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Todo</span> <span class="n">newTodo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoService</span><span class="o">.</span><span class="na">createNewTodo</span><span class="o">(</span><span class="n">newTodo</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/{id}&quot;</span> <span class="o">,</span><span class="n">method</span> <span class="o">=</span> <span class="n">DELETE</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="n">todoService</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/{id}&quot;</span> <span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">PUT</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Todo</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Todo</span> <span class="n">updateTodo</span><span class="o">,</span> <span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoService</span><span class="o">.</span><span class="na">updateTodo</span><span class="o">(</span><span class="n">updateTodo</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中@RestController是Spring 4中的annotation，它集合了@Controller和@ResponseBody的作用，能够标注一个类是Controller，并且是该类的方法返回一个domain对象。@RequestMapping用于确保该类中方法map到对应的路径。@PathVariable会将url中的参数解析到对应的方法参数上，使用它时需要在@RequestMapping()指定匹配模式 ，例如：<code>@RequestMapping(value = "/{id}" ,method = DELETE)</code>，当使用<code>/1</code>时，就可以把“1”解析到方法参数id上。</p>

<p>传统Spring MVC的Controller与RESTful Web服务器的Controller最大的区别在于建立HTTP响应的方式。这个例子中的Controller只使用Todo对象进行传入和返回参数，Todo对象以JSON的形式传输。</p>

<h2>Service</h2>

<p>有了Controller之后，我们需要一个Service来处理Controller与Repository之间的交互。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">todos</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Qualifier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TodoService</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&quot;todoRepository&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">TodoRepository</span> <span class="n">todoRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Todo</span><span class="o">&gt;</span> <span class="nf">findAllList</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Todo</span> <span class="nf">createNewTodo</span><span class="o">(</span><span class="n">Todo</span> <span class="n">todo</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">todo</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Todo</span> <span class="nf">findById</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoRepository</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="n">todoRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Todo</span> <span class="nf">updateTodo</span><span class="o">(</span><span class="n">Todo</span> <span class="n">todo</span><span class="o">,</span> <span class="n">Long</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">id</span> <span class="o">!=</span> <span class="n">todo</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
</span><span class='line'>            <span class="n">todoRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">todoRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">todo</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，该Service中Autowired了TodoRepository，并利用其实现了对Todo的增删查改。</p>

<h2>Repository</h2>

<p>本例中使用Spring Data JPA进行数据存储，它关注在关系型数据库使用JPA存储数据，在运行时从一个repository接口中自动创建repository实例。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">todos</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.repository.CrudRepository</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TodoRepository</span> <span class="kd">extends</span> <span class="n">CrudRepository</span><span class="o">&lt;</span><span class="n">Todo</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
本例子中的<code>TodoRepository</code>继承了<code>CrudRepository</code>接口，通过泛型指定了实体类型是Todo和Long。<code>CrudRepository</code>包括多个持久化方法，包括保存、删除、查找和更新Todo实体。<code>TodoRepository</code>继承了这些方法，并且可以在此基础上修改或者增加一些新的方法。</p>

<h2>配置文件</h2>

<p>Spring Boot不需要xml配置文件，只需要在resources目录下添加一个application.yml文件来进行相应的配置，例如使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">spring:</span>
</span><span class='line'>  <span class="nl">profiles:</span> <span class="n">development</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">datasource:</span>
</span><span class='line'>    <span class="nl">driverClassName:</span> <span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">Driver</span>
</span><span class='line'>    <span class="nl">url:</span> <span class="nl">jdbc:mysql:</span><span class="c1">//localhost:3306/todos</span>
</span><span class='line'>    <span class="nl">username:</span> <span class="n">root</span>
</span><span class='line'>    <span class="nl">password:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">jpa:</span>
</span><span class='line'>     <span class="n">show</span><span class="o">-</span><span class="nl">sql:</span> <span class="kc">true</span>
</span><span class='line'>     <span class="nl">hibernate:</span>
</span><span class='line'>       <span class="n">ddl</span><span class="o">-</span><span class="nl">auto:</span> <span class="n">update</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>设置本例中使用jpa和mysql.</p>

<h2>启动应用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">todos</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@EnableAutoConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Application类的main方法中使用了SpringApplication帮助类，并以Application这个类作为配置来启动Spring的应用上下文。<code>@EnableAutoConfiguration</code>用于开启自动配置，使用它可以使我们刚刚设置的配置文件自动生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS VOCABULARY]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/08/03/css-vocabulary/"/>
    <updated>2014-08-03T13:34:16+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/08/03/css-vocabulary</id>
    <content type="html"><![CDATA[<p>CSS词汇是前端开发经常需要用到的东西，但是各种各样的CSS词汇经常令人眼花缭乱。本文主要总结一些CSS词汇的主要功能和用法。</p>

<h2><strong>@import</strong></h2>

<p>它是一种引入CSS的方式，可以在一个CSS文件中引入另一个CSS文件，使用方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="nt">url</span><span class="o">(</span><span class="nt">my</span><span class="nc">.css</span><span class="o">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><strong>Media Queries</strong></h2>

<p>根据字面意思，“Media Queries”就是媒体查询。在CSS中，我们可以设置不同类型的媒体条件，并根据相应的条件，为符合条件的媒体调用与之对应的样式表。它主要用于响应式网页设计（Responsive web Design），该设计可使网站在多种浏览设备上完美显示。</p>

<p>Media Queries的简单用法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">700px</span><span class="o">)</span><span class="p">{</span>
</span><span class='line'>  <span class="nf">#content</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上media语句表示，当屏幕的最大宽度小于700px时，#content的宽度就变为原来的50%。这个例子包含了几种概念：</p>

<ul>
<li>媒体类型（Media Type）</li>
</ul>


<p>通过媒体类型可以对不同的设备指定不同的样式，如上例中的screen。<a href="http://www.w3.org/TR/CSS2/media.html#media-types">常见的媒体类型</a>有数十种。</p>

<ul>
<li>媒体特性（Media Features）</li>
</ul>


<p>媒体特性就是媒体类型的特性，如上例中的mix-width，是指屏幕的最大宽度。<a href="http://www.w3.org/TR/css3-mediaqueries/#media1">常见的媒体特性</a>有十三种。</p>

<ul>
<li>关键词（Key Word）</li>
</ul>


<p>关键词有三种：and， not， only。</p>

<p>and用于定义“与”条件，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="o">(</span><span class="nt">min-width</span><span class="nd">:600px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="nd">:900px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>是指屏幕的最小宽度大于600px并且最大宽度小于900px。</p>

<p>not用于排除某种特定的媒体类型，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">not</span> <span class="nt">print</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">1200px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>是指排除print这种媒体类型。</p>

<p>only用来指定某种特定的媒体类型，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="nd">:240px</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用来特指screen这种媒体类型。</p>

<h2><strong>CSS选择器</strong></h2>

<p>CSS选择器是CSS中最常用的东西，我们都不会感到陌生。但是它还有一些高端、神奇、不为常人所知的功能，下文将一一介绍。常用的CSS选择器有三种：</p>

<ul>
<li>简单选择器（Simple Selector）</li>
<li>属性选择器（Attribute Selector）</li>
<li>伪类选择器（Pseudo-class Selector）</li>
</ul>


<h3><strong>一. 简单选择器</strong></h3>

<p>简单选择器是CSS世界使用最为广泛的选择器，我将通过一个实例来总结它的用法。实例的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;demo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;first&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;first&quot;</span><span class="o">&gt;</span><span class="nt">1</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;active important&quot;</span><span class="o">&gt;</span><span class="nt">2</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;important items&quot;</span><span class="o">&gt;</span><span class="nt">3</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;important&quot;</span><span class="o">&gt;</span><span class="nt">4</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;items&quot;</span><span class="o">&gt;</span><span class="nt">5</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">6</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">7</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">8</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">9</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;last&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;last&quot;</span><span class="o">&gt;</span><span class="nt">10</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在添加一些样式之后，实例的初步现实如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-status.png" alt="" /></p>

<h4>1. 通配符选择器（Universal Selector）（*）</h4>

<p>通配符选择器用来选择所有元素，或者某个元素下的所有元素。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">*</span><span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示选择所有元素，并将其margin、padding都设置为0。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="o">*</span><span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示选择了.demo下的所有所有元素。以上例子的效果图如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-tp.png" alt="" /></p>

<p>从图中可以看出，div.demo下所有元素的边框都加上了上面代码中定义的样式。</p>

<h4>2. 元素选择器（Element Selector）（E）</h4>

<p>元素就是html页面中的元素，例如本文中的div，ul，li等。元素选择器用来选择这些页面元素。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="n">grey</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子选择html中的li元素，并将其背景色设为grey，前景色设为orange，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-e.png" alt="" /></p>

<h4>3. 类选择器（Class Selector）（.className）</h4>

<p>类选择器根据html文档中元素的类名来选择元素，也就是说元素必须有类名才能使用类选择器来选择。上文中的items，important等就是为相应元素添加的类，类选择器可以用来选择这些元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.important</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示选择类名为important的元素，并将其字体加粗、前景色设为yellow。值得注意的是，类选择器并不仅仅选择类名为important的元素，而是选择类名中包含important的元素，效果图如下：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_css_vocabulary/class.png" alt="" /></p>

<h4>4. ID选择器（ID Selector）(#ID)</h4>

<p>与类选择器类似，ID选择器根据html文档中元素的id来选择元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#first</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">lime</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#last</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">lime</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上例中，选择id为first的元素，将其背景色设为lime，前景色设为#000；选择id为last的元素，将其背景色设为#000，前景色设为lime，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css-select-id.png" alt="" /></p>

<h4>5. 后代选择器（Descendant Selector）(E F)</h4>

<p>后代选择器也叫包含选择器，它可以选择某元素的后代元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上例中，.demo是祖先元素，li是后代元素。该例子所表达的意思是，选择了.demo的所有后代li元素，不管li与.demo之间是子元素、孙元素或者更深的层级关系，li都会被选中。效果为：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-ef.png" alt="" /></p>

<h4>6. 子选择器（Child Selector）(E>F)</h4>

<p>与后代选择器不同，子元素指选择某元素的子元素。例如：E>F，其中E为父元素，F为子元素，该表达式表示选择E元素下的所有子元素F。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span> <span class="o">&gt;</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子表示，选择ul的所有子元素li，效果图如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-chirld.png" alt="" /></p>

<p>如果将上例中的ul改为div则不能选中li元素，因为li不是div的子元素。</p>

<h4>7. 相邻选择器（Adjacent Sibling Selector）(E+F)</h4>

<p>相邻选择器可以选择紧接在另一个元素后的元素，而且他们具有相同的父元素。例如：E+F，E元素和F元素具有相同的父元素，且F元素在的后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">li</span> <span class="o">+</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上例用来选择li之前有个li的元素，效果图如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css-selector-xl.png" alt="" /></p>

<p>从图中可以看出，第一个li元素没有被选中，因为它的前面没有li元素。</p>

<h4>8. 普通兄弟选择器（General Sibling Selector）(E~F)</h4>

<p>普通兄弟选择器用来选择元素后面所有的兄弟元素，它们可以不相邻，但必须具有相同的父元素。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.active</span> <span class="o">~</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用来选择.active元素后面的所有兄弟元素li，效果如下:</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-tongyong.png" alt="" /></p>

<h4>9. 群组选择器（Group Selector）(selector1,selector2,&hellip;,selectorN)</h4>

<p>群组选择器将具有相同样式的元素放在一起，中间以逗号隔开，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.first</span><span class="o">,</span> <span class="nc">.last</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用来为.first和.last元素添加一些相同的样式，效果如下:</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-group.png" alt="" /></p>

<h3><strong>二. 属性选择器</strong></h3>

<p>属性选择器用来对带有指定属性的html元素设置样式。同样，我将通过一个实例来总结属性选择器的用法，实例的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;demo clearfix&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;http://www.xxx.com&quot;</span> <span class="nt">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item first&quot;</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;first&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;first&quot;</span><span class="o">&gt;</span><span class="nt">1</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links active item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;test website&quot;</span> <span class="nt">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">&quot;zh&quot;</span><span class="o">&gt;</span><span class="nt">2</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;sites/file/test.html&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;this is a link&quot;</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">&quot;zh-cn&quot;</span><span class="o">&gt;</span><span class="nt">3</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;sites/file/test.png&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">target</span><span class="o">=</span><span class="s2">&quot;_balnk&quot;</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">&quot;zh-tw&quot;</span><span class="o">&gt;</span><span class="nt">4</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;sites/file/image.jpg&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;zh-cn&quot;</span><span class="o">&gt;</span><span class="nt">5</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;mailto:xxx@hotmail&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;website link&quot;</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">&quot;zh&quot;</span><span class="o">&gt;</span><span class="nt">6</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;open the website&quot;</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">&quot;cn&quot;</span><span class="o">&gt;</span><span class="nt">7</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;close the website&quot;</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">&quot;en-zh&quot;</span><span class="o">&gt;</span><span class="nt">8</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item&quot;</span> <span class="nt">title</span><span class="o">=</span><span class="s2">&quot;http://www.sina.com&quot;</span><span class="o">&gt;</span><span class="nt">9</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;links item last&quot;</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;last&quot;</span><span class="o">&gt;</span><span class="nt">10</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在添加一些样式之后，实例的初步现实如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-status.png" alt="" /></p>

<h4>1. E[attr]</h4>

<p>E[attr]用来选择具有某种属性的元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">id</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span><span class="k">bold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，.demo下所有带id属性的a元素，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr.png" alt="" /></p>

<h4>2. E[attr = &ldquo;value&rdquo;]</h4>

<p>E[attr = &ldquo;value&rdquo;]用来选择具有某种属性，并且属性的值为“value”的元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s2">&quot;first&quot;</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span><span class="k">bold</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，.demo下带有id属性，并且id的值为“first”的元素，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr2.png" alt="" /></p>

<h4>3. E[attr ~= &ldquo;value&rdquo;]</h4>

<p>E[attr ~= &ldquo;value&rdquo;]根据属性值中的词列表来进行选择，选择属性值中具有“value”这个词的元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">title</span><span class="o">~=</span><span class="s2">&quot;website&quot;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">orange</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，.demo下的a元素的title属性中，只有其属性值包含“website”这个词就会被选择，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr4.png" alt="" /></p>

<h4>4. E[attr ^= &ldquo;value&rdquo;]</h4>

<p>E[attr ^= &ldquo;value&rdquo;]选择attr属性值以“value”开头的所有元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">href</span><span class="o">^=</span><span class="s2">&quot;http://&quot;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">orange</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">href</span><span class="o">^=</span><span class="s2">&quot;mailto:&quot;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">orange</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo下具有href属性的a元素，并且href属性的值是以<code>http://</code>和<code>mailto:</code>开头，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr5.png" alt="" /></p>

<h4>5. E[attr $= &ldquo;value&rdquo;]</h4>

<p>与E[attr ^= &ldquo;value&rdquo;]相反，E[attr $= &ldquo;value&rdquo;]选择attr属性值以“value”结尾的元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">href</span><span class="o">$=</span><span class="s2">&quot;png&quot;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">orange</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">green</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo下具有href属性的a元素，并且属性href的值以“png”结尾，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr6.png" alt="" /></p>

<h4>6. E[attr *= &ldquo;value&rdquo;]</h4>

<p>E[attr *= &ldquo;value&rdquo;]选择attr属性值包含子串“value”的所有元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">title</span><span class="o">*=</span><span class="s2">&quot;site&quot;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">white</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo下具有title属性的a元素，并且title属性值包含子串“site”，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr7.png" alt="" /></p>

<h4>7. E[attr |= &ldquo;value&rdquo;]</h4>

<p>E[attr |= &ldquo;value&rdquo;]选择attr属性值等于“value”或以“value-”开头的所有元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="o">[</span><span class="nt">lang</span><span class="o">|=</span><span class="s2">&quot;zh&quot;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span><span class="nb">gray</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo下具有lang属性的a元素，并且属性lang的值为“zh”或以“zh-”开头，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-attr8.png" alt="" /></p>

<h3><strong>三. 伪类选择器</strong></h3>

<h4>动态伪类</h4>

<p>动态伪类并不存在与html文档中，只有当用户和网站交互的时候它才能体现出来。动态伪类包含两种：锚点伪类（Anchor Pseudo-Classes）和用户行为伪类（User Action Pseudo-Class）。</p>

<ul>
<li><strong>锚点伪类</strong></li>
</ul>


<p>锚点伪类常用于链接的样式设置，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="nd">:link</span> <span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="nb">gray</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="nd">:visited</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="nb">yellow</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="nd">:hover</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="nb">green</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.demo</span> <span class="nt">a</span><span class="nd">:active</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="nb">blue</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，链接没有被访问时前景色为灰色，链接被访问过后前景色为黄色，鼠标悬浮在链接上时前景色为绿色，鼠标点中激活链接那一下前景色为蓝色。
注意这四个锚点伪类的设置顺序，如果顺序不对会使我们设置的样式不生效。</p>

<ul>
<li><strong>用户行为伪类</strong></li>
</ul>


<p>用户行为伪类用于设置用户和页面交互时的一些样式设置，锚点伪类中的:hover和:active同时又是用户行为伪类。</p>

<ul>
<li>:hover，用于设置当用户把鼠标移动到元素上面时的效果；</li>
<li>:active，用于设置用户点击元素时的效果（动作发生在点击的当时，松开鼠标此动作就会消失）；</li>
<li>:focus，用户设置某元素成为焦点时的样式（例如选择一个输入框）。</li>
</ul>


<h4>UI状态伪类</h4>

<p>常见的UI状态伪类有：</p>

<ul>
<li>:enabled</li>
<li>:disabled</li>
<li>:checked</li>
</ul>


<p>这些伪类主要针对html文档中的Form元素操作，最常见的有"type=&lsquo;text&rsquo;&ldquo;有enabled和disabled两种状态，前者表示可写，后者表示不可写。那么使用UI状态伪类就可以为同一个元素的不同状态设置不同的样式，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span><span class="o">]</span><span class="nd">:disabled</span> <span class="p">{</span><span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#999</span><span class="p">;</span><span class="k">background-color</span><span class="o">:</span> <span class="m">#fefefe</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，为页面中禁用的文本框设置一个样式。</p>

<h4>:nth选择器</h4>

<p>:nth选择器是伪类选择器中最复杂的一个，我将通过一个实例总结其用法，实例的代码为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;demo clearfix&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">ul</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;clearfix&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;first odd&quot;</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;first&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">1</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;even&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">2</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;odd&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">3</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;even&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">4</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;odd&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">5</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;even&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">6</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;odd&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">7</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;even&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">8</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;odd&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">9</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">li</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;even last&quot;</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;last&quot;</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span><span class="nt">10</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在添加一些样式之后，实例的初步现实如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-status.png" alt="" /></p>

<h5>1. :first-child()</h5>

<p>:first-child()用来选择某个元素的第一个元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span><span class="nd">:first-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">dotted</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo的第一个li子元素，并为其加上一些样式，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-nth1.png" alt="" /></p>

<h5>2. :last-child()</h5>

<p>顾名思义，:last-child()用来选择某个元素的最后一个子元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span><span class="nd">:last-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">dotted</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo的最后一个li子元素，并为其加上一些样式，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-nth2.png" alt="" /></p>

<h5>3. :nth-child()</h5>

<p>:nth-child()可以选择一个元素的某个子元素，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">3</span><span class="o">)</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">lime</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示.demo的第三个li子元素，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-nth3.png" alt="" /></p>

<p>也可以选择某些子元素，有如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">n</span><span class="o">)</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">lime</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo下所有的子元素，这里的n是一个从0开始计数的变量，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-nth4.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">-n</span><span class="o">+</span><span class="nt">5</span><span class="o">)</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">lime</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为n是从0开始计数的，所以以上代码会选择.demo的前5个li子元素。</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-nth8.png" alt="" /></p>

<p>:nth-child()的用法还有很多，具体总结如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">length</span><span class="o">);</span><span class="c">/*参数是具体数字*/</span>
</span><span class='line'><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">n</span><span class="o">);</span><span class="c">/*参数是n,n从0开始计算*/</span>
</span><span class='line'><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">n</span><span class="o">*</span><span class="nt">length</span><span class="o">)</span><span class="c">/*n的倍数选择，n从0开始算*/</span>
</span><span class='line'><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">n</span><span class="o">+</span><span class="nt">length</span><span class="o">);</span><span class="c">/*选择大于length后面的元素*/</span>
</span><span class='line'><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">-n</span><span class="o">+</span><span class="nt">length</span><span class="o">)</span><span class="c">/*选择小于length前面的元素*/</span>
</span><span class='line'><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">n</span><span class="o">*</span><span class="nt">length</span><span class="o">+</span><span class="nt">1</span><span class="o">);</span><span class="c">/*表示隔几选一*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于:nth-child()有个很好玩，也特别容易出错的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">a</span><span class="o">&gt;</span><span class="nt">link</span><span class="o">&lt;/</span><span class="nt">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">some</span> <span class="nt">text</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">apple</span> <span class="nt">1</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>  <span class="c">/*这一行会被选出*/</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">apple</span> <span class="nt">2</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">apple</span> <span class="nt">3</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">apple</span> <span class="nt">4</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;</span><span class="nt">apple</span> <span class="nt">5</span><span class="o">&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">ul</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于这段代码，使用CSS选择器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span> <span class="nt">li</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">3</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>会选中apple 1那一行。这是因为nth-child()并不是从前面的选择符筛选后的结果中选择第n个。它的定义是，选择在其parent下的第n个子元素。而这个“第n个”的计算，是把它parent下所有的子元素都包括在内的。</p>

<h5>4. :nth-last-child()</h5>

<p>:nth-last-child()与:nth-child()相似，只是它是由最后一个开始元素开始计数的，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.demo</span> <span class="nt">li</span><span class="nd">:nth-last-child</span><span class="o">(</span><span class="nt">4</span><span class="o">)</span> <span class="p">{</span><span class="k">background</span><span class="o">:</span> <span class="nb">lime</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示，选择.demo下的倒数第四个li元素，效果如下：</p>

<p><img src="http://www.w3cplus.com/sites/default/files/css3-selector-nth10.png" alt="" /></p>

<h5>5. :empty</h5>

<p>:empty用于设置当元素没有任何内容时的样式。例如，页面中有一个box是用来输出错误信息的，那么当没有错误信息时，我们就可以通过:empty使之不显示。</p>

<h5>6. other nth selector</h5>

<p>:nth选择器还有很多与:nth-child()相类似的其他用法，这里只将它们列举出来，不再一一赘述。</p>

<ul>
<li>:first-of-type</li>
<li>:last-of-type</li>
<li>:nth-of-type</li>
<li>:nth-last-type</li>
<li>:only-child</li>
<li>:only-of-type</li>
</ul>


<h2><strong>伪元素</strong></h2>

<p>所谓伪元素，可以理解为浏览器为某元素附加的元素。常用的伪元素有：</p>

<ul>
<li>::first-line</li>
<li>::first-letter</li>
<li>::before</li>
<li>::after</li>
</ul>


<p>::first-line和::first-letter可以用于方便的为文本添加一些特殊的样式，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;line&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nt">The</span> <span class="nt">Coming</span> <span class="nt">of</span> <span class="nt">Wisdom</span> <span class="nt">with</span> <span class="nt">Time</span><span class="o">;</span> <span class="o">&lt;</span><span class="nt">br</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="nt">Though</span> <span class="nt">leaves</span> <span class="nt">are</span> <span class="nt">many</span><span class="o">,</span> <span class="nt">the</span> <span class="nt">root</span> <span class="nt">is</span> <span class="nt">one</span><span class="o">;</span> <span class="o">&lt;</span><span class="nt">br</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="nt">Through</span> <span class="nt">all</span> <span class="nt">the</span> <span class="nt">lying</span> <span class="nt">days</span> <span class="nt">of</span> <span class="nt">my</span> <span class="nt">youth</span><span class="o">;</span> <span class="o">&lt;</span><span class="nt">br</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="nt">I</span> <span class="nt">swayed</span> <span class="nt">my</span> <span class="nt">leaves</span> <span class="nt">and</span> <span class="nt">flowers</span> <span class="nt">in</span> <span class="nt">the</span> <span class="nt">sun</span><span class="o">;</span> <span class="o">&lt;</span><span class="nt">br</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="nt">Now</span> <span class="nt">I</span> <span class="nt">may</span> <span class="nt">wither</span> <span class="nt">into</span> <span class="nt">the</span> <span class="nt">truth</span><span class="o">.</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以通过伪元素为其添加一些特殊样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">p</span><span class="o">:</span><span class="nd">:first-line</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">p</span><span class="o">:</span><span class="nd">:first-letter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">70px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin-right</span><span class="o">:</span><span class="m">3px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果为：</p>

<p><img src="http://jiamaoweilie.github.io/images/img_for_css_vocabulary/firstline.png" alt="" /></p>

<p>同理，::before和::after用于向元素的前面和后面添加一些特殊样式，它们需要与content属性一起使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.css-class</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.css-class</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过伪元素，可以方便的实现一些使用其他方法需要花费很大力气的工作。可以通过<strong><a href="http://icodeit.org/2013/05/before-and-after-selector-in-css/">这里</a></strong>了解它的用法和一些实例.</p>
]]></content>
  </entry>
  
</feed>
