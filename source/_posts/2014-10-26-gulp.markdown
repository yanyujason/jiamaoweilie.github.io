---
layout: post
title: "使用Gulp简化开发"
date: 2014-10-26 20:15:02 +0800
comments: true
categories: Gulp,JavaScript
---
[Gulp](http://gulpjs.com/)是一个轻量级的前端构建工具，它用来自动执行项目开发过程中遇到的许多耗时又无聊（但是非常重要）的任务，这些任务包括运行测试、拼接文件、精简文件以及CSS预处理。通过简单的创建一个任务文件，可以指示Gulp来自动运行一些开发中的任务，节省时间可以使你专注于开发本身。

##安装Gulp##
Gulp是基于Node.js的构建工具，安装Gulp之前必须安装[Node.js](http://nodejs.org/)。在Mac中安装Node.js的方法非常简单。

如果使用homebrew，可以直接通过以下命令安装：

	$ brew install node

如果没有则可以下载安装包，并按照说明安装。

为了确保Node.js已经正确安装，可以执行几个简单的命令。

	$ node -v

如果安装正确，可以看到Node.js的版本号。

	v0.10.29

再来验证下npm：

	$ npm -v

同样，如果安装正确，可以看到npm的版本号：

	1.4.16

Node.js安装成功之后，可以使用npm来方便的安装Gulp：

	$ sudo npm install -g gulp 

其中，`npm`是安装node包的工具；`-g`表示在全局环境安装，以方便其他项目使用。安装成功后同样可以使用`gulp -v`命令查看Gulp的版本号，确保已经被成功安装。

接下来我们需要在本地项目中安装Gulp：

	$ npm install —-save-dev gulp

其中，`--save-dev`用来更新package.json文件，更新`devDependencies`值，以表明项目需要依赖Gulp。`Dependencies`可以向其他参与项目的人指明项目在开发环境和产品环境中的node模块依懒关系.更多关于此的问题，可以参见[package.json文档](https://www.npmjs.org/doc/files/package.json.html#dependencies)。

##使用Gulp##

安装成功之后，我们来看看如何使用Gulp。

Gulp运行时，会在当前目录中查找gulpfile.js文件，并执行该文件中的内容。因此，使用Gulp的第一步是创建一个名为gulpfile.js的文件，然后再里面定义我们需要Gulp执行的任务。例如，我们先来定义一个Gulp的默认任务：

```js
var gulp = require('gulp');

gulp.task('default', function(){
   console.log('Hello world!');
});
```

`gulp.task()`函数通常用来定义任务，例如上面代码中定义了一个default任务，该任务用来打印一个字符串。定义好该文件之后，可以通过在命令行中输入`gulp`命令来执行default任务，命令行中会输出如下结果：

	[22:21:06] Using gulpfile ~/WorkShops/homework/gulp/gulpfile.js
	[22:21:06] Starting 'default'...
	Hello world!
	[22:21:06] Finished 'default' after 103 μs

知道Gulp的运行机制后，我们来看看如何使用Gulp帮助我们简化开发工作。例如，我们不想在产品环境中向用户暴露未压缩的源码，就可以使用Gulp来合并并且压缩所有.js文件为一个大文件。

首先，我们需要安装相应的插件:

	$ npm install -–save-dev gulp-concat gulp-ugligfy gulp-rename

其中`gulp-concat`插件用来合并文件，`gulp-ugligfy`插件用来压缩文件，`gulp-rename`用来重命名文件。安装成功之后，需要更新gulpfile.js文件:

```
var gulp = require('gulp'),
    concat = require('gulp-concat'),
    uglify = require('gulp-uglify'),
    rename = require('gulp-rename');

gulp.task('scripts', function () {
    gulp.src('./js/*.js')
        .pipe(concat('all.js'))
        .pipe(gulp.dest('./dist'))
        .pipe(rename('all.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('./dist'));
});
```

定义好task之后，可以使用`gulp scripts`命令来执行该task。

通过代码可以看出，该任务首先会找到js目录下的所有.js文件，将其合并为一个名为all.js文件，然后将其放置来dist目录下，并重命名为all.min.js，最后将这个文件压缩,并保存在dist目录下的all.min.js文件中。在该task下定义的子任务通过pipe连接起来，当数据从管道的前一个节点流出之后，会流入下一个节点，而且数据在此过程中并不会写入中间文件，也就是说中间文件all.js最后并不会存在。

可以通过以下流程描述Gulp中task的执行方式:

	读文件 ==> 子任务1 ==> 子任务2 ==> 子任务3 ===》··· ==> 子任务N ==> 写文件

与Grunt（使用文件，对文件执行单个任务然后保存到新的文件中，每个任务都会重复执行所有进程，文件系统频繁的处理任务会导致Grunt的运行速度比Gulp慢。）相比，Gulp的主要优势在于数据流操作，通过这种方式可以减小文件的读写工作，提高效率。更多关于数据流的知识，可以参见[Stream Handbook](https://github.com/substack/stream-handbook)。Gulp的另一个优势是符合程序员的阅读习惯，通过代码，我们可以很轻松的看到该任务执行的主要内容。

如果我们需要Gulp帮我们来检查Javascript文件的格式，也可以定义一个类似的task。 首先需要安装用于检查格式的插件`gulp-jshint`：

	$ npm install gulp-jshint 

然后定义一个名为`lint`的task：

```
var jslint = require('gulp-jslint');

gulp.task('lint', function () {
    gulp
        .src([
            './app/scripts/controllers/**/*.js',
            './app/scripts/services/**/*.js',
            './app/scripts/main.js'
        ])
        .pipe(jshint('.jshintrc'))
        .pipe(jshint.reporter('default'));
});
```

通过代码可以看出，该task会检查多个目录下的.js文件，并且执行检查其格式，然后使用reporter生成报告。

.jshintrc文件是一个定义jslint检查规则的文件，文件内容通常如下：

```
{
    "node": true,
    "browser": true,
    "esnext": true,
    "bitwise": true,
    "camelcase": true,
    "curly": true,
    "eqeqeq": true,
    "immed": true,
    "indent": 2,
    "latedef": true,
    "newcap": true,
    "noarg": true,
    "quotmark": "single",
    "regexp": true,
    "undef": true,
    "unused": true,
    "strict": true,
    "trailing": true,
    "smarttabs": true,
    "predef": [
        "describe",
        "expect",
        "it",
        "beforeEach",
        "inject",
        "jasmine",
        "jQuery",
        "spyOn",
        "afterEach"
    ]
}
```

定义好task之后，执行命令`gulp lint`就可以看到检查结果：

![](/images/img_for_gulp/error-right.png)

从图中可以看到jslint帮我们找到了很多代码中的格式错误，等修复了这些错误之后，重新执行`gulp lint`命令，就不会报错了：

![](/images/img_for_gulp/noerror.png)

如果我们需要在一个task中执行多个之前定义的task，则可以像下面这样做：

```
gulp.task('build', ['test', 'lint', 'scripts', 'copy', 'views'], function () {
});
```
可以看到，在build命令中，我们执行了多个task，例如test，lint，scripts等。

类似的，Gulp还可以帮我们做很多事情，它有超过600种插件可以供开发者选择。你可以在[插件页面](http://gulpjs.com/plugins/)或者npm上搜索gulpplugin来浏览插件列表，然后定义更多的task来简化我们的开发工作。