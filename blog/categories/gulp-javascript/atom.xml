<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gulp,javascript | My Octopress Blog]]></title>
  <link href="http://jiamaoweilie.github.io/blog/categories/gulp-javascript/atom.xml" rel="self"/>
  <link href="http://jiamaoweilie.github.io/"/>
  <updated>2017-03-07T22:34:29+08:00</updated>
  <id>http://jiamaoweilie.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Gulp简化开发]]></title>
    <link href="http://jiamaoweilie.github.io/blog/2014/10/26/gulp/"/>
    <updated>2014-10-26T20:15:02+08:00</updated>
    <id>http://jiamaoweilie.github.io/blog/2014/10/26/gulp</id>
    <content type="html"><![CDATA[<p><a href="http://gulpjs.com/">Gulp</a>是一个轻量级的前端构建工具，它用来自动执行项目开发过程中遇到的许多耗时又无聊（但是非常重要）的任务，这些任务包括运行测试、拼接文件、精简文件以及CSS预处理。通过简单的创建一个任务文件，可以指示Gulp来自动运行一些开发中的任务，节省时间可以使你专注于开发本身。</p>

<h2>安装Gulp</h2>

<p>Gulp是基于Node.js的构建工具，安装Gulp之前必须安装<a href="http://nodejs.org/">Node.js</a>。在Mac中安装Node.js的方法非常简单。</p>

<p>如果使用homebrew，可以直接通过以下命令安装：</p>

<pre><code>$ brew install node
</code></pre>

<p>如果没有则可以下载安装包，并按照说明安装。</p>

<p>为了确保Node.js已经正确安装，可以执行几个简单的命令。</p>

<pre><code>$ node -v
</code></pre>

<p>如果安装正确，可以看到Node.js的版本号。</p>

<pre><code>v0.10.29
</code></pre>

<p>再来验证下npm：</p>

<pre><code>$ npm -v
</code></pre>

<p>同样，如果安装正确，可以看到npm的版本号：</p>

<pre><code>1.4.16
</code></pre>

<p>Node.js安装成功之后，可以使用npm来方便的安装Gulp：</p>

<pre><code>$ sudo npm install -g gulp 
</code></pre>

<p>其中，<code>npm</code>是安装node包的工具；<code>-g</code>表示在全局环境安装，以方便其他项目使用。安装成功后同样可以使用<code>gulp -v</code>命令查看Gulp的版本号，确保已经被成功安装。</p>

<p>接下来我们需要在本地项目中安装Gulp：</p>

<pre><code>$ npm install —-save-dev gulp
</code></pre>

<p>其中，<code>--save-dev</code>用来更新package.json文件，更新<code>devDependencies</code>值，以表明项目需要依赖Gulp。<code>Dependencies</code>可以向其他参与项目的人指明项目在开发环境和产品环境中的node模块依懒关系.更多关于此的问题，可以参见<a href="https://www.npmjs.org/doc/files/package.json.html#dependencies">package.json文档</a>。</p>

<h2>使用Gulp</h2>

<p>安装成功之后，我们来看看如何使用Gulp。</p>

<p>Gulp运行时，会在当前目录中查找gulpfile.js文件，并执行该文件中的内容。因此，使用Gulp的第一步是创建一个名为gulpfile.js的文件，然后再里面定义我们需要Gulp执行的任务。例如，我们先来定义一个Gulp的默认任务：</p>

<pre><code class="js">var gulp = require('gulp');

gulp.task('default', function(){
   console.log('Hello world!');
});
</code></pre>

<p><code>gulp.task()</code>函数通常用来定义任务，例如上面代码中定义了一个default任务，该任务用来打印一个字符串。定义好该文件之后，可以通过在命令行中输入<code>gulp</code>命令来执行default任务，命令行中会输出如下结果：</p>

<pre><code>[22:21:06] Using gulpfile ~/WorkShops/homework/gulp/gulpfile.js
[22:21:06] Starting 'default'...
Hello world!
[22:21:06] Finished 'default' after 103 μs
</code></pre>

<p>知道Gulp的运行机制后，我们来看看如何使用Gulp帮助我们简化开发工作。例如，我们不想在产品环境中向用户暴露未压缩的源码，就可以使用Gulp来合并并且压缩所有.js文件为一个大文件。</p>

<p>首先，我们需要安装相应的插件:</p>

<pre><code>$ npm install -–save-dev gulp-concat gulp-ugligfy gulp-rename
</code></pre>

<p>其中<code>gulp-concat</code>插件用来合并文件，<code>gulp-ugligfy</code>插件用来压缩文件，<code>gulp-rename</code>用来重命名文件。安装成功之后，需要更新gulpfile.js文件:</p>

<pre><code>var gulp = require('gulp'),
    concat = require('gulp-concat'),
    uglify = require('gulp-uglify'),
    rename = require('gulp-rename');

gulp.task('scripts', function () {
    gulp.src('./js/*.js')
        .pipe(concat('all.js'))
        .pipe(gulp.dest('./dist'))
        .pipe(rename('all.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('./dist'));
});
</code></pre>

<p>定义好task之后，可以使用<code>gulp scripts</code>命令来执行该task。</p>

<p>通过代码可以看出，该任务首先会找到js目录下的所有.js文件，将其合并为一个名为all.js文件，然后将其放置来dist目录下，并重命名为all.min.js，最后将这个文件压缩,并保存在dist目录下的all.min.js文件中。在该task下定义的子任务通过pipe连接起来，当数据从管道的前一个节点流出之后，会流入下一个节点，而且数据在此过程中并不会写入中间文件，也就是说中间文件all.js最后并不会存在。</p>

<p>可以通过以下流程描述Gulp中task的执行方式:</p>

<pre><code>读文件 ==&gt; 子任务1 ==&gt; 子任务2 ==&gt; 子任务3 ===》··· ==&gt; 子任务N ==&gt; 写文件
</code></pre>

<p>与Grunt（使用文件，对文件执行单个任务然后保存到新的文件中，每个任务都会重复执行所有进程，文件系统频繁的处理任务会导致Grunt的运行速度比Gulp慢。）相比，Gulp的主要优势在于数据流操作，通过这种方式可以减小文件的读写工作，提高效率。更多关于数据流的知识，可以参见<a href="https://github.com/substack/stream-handbook">Stream Handbook</a>。Gulp的另一个优势是符合程序员的阅读习惯，通过代码，我们可以很轻松的看到该任务执行的主要内容。</p>

<p>如果我们需要Gulp帮我们来检查Javascript文件的格式，也可以定义一个类似的task。 首先需要安装用于检查格式的插件<code>gulp-jshint</code>：</p>

<pre><code>$ npm install gulp-jshint 
</code></pre>

<p>然后定义一个名为<code>lint</code>的task：</p>

<pre><code>var jslint = require('gulp-jslint');

gulp.task('lint', function () {
    gulp
        .src([
            './app/scripts/controllers/**/*.js',
            './app/scripts/services/**/*.js',
            './app/scripts/main.js'
        ])
        .pipe(jshint('.jshintrc'))
        .pipe(jshint.reporter('default'));
});
</code></pre>

<p>通过代码可以看出，该task会检查多个目录下的.js文件，并且执行检查其格式，然后使用reporter生成报告。</p>

<p>.jshintrc文件是一个定义jslint检查规则的文件，文件内容通常如下：</p>

<pre><code>{
    "node": true,
    "browser": true,
    "esnext": true,
    "bitwise": true,
    "camelcase": true,
    "curly": true,
    "eqeqeq": true,
    "immed": true,
    "indent": 2,
    "latedef": true,
    "newcap": true,
    "noarg": true,
    "quotmark": "single",
    "regexp": true,
    "undef": true,
    "unused": true,
    "strict": true,
    "trailing": true,
    "smarttabs": true,
    "predef": [
        "describe",
        "expect",
        "it",
        "beforeEach",
        "inject",
        "jasmine",
        "jQuery",
        "spyOn",
        "afterEach"
    ]
}
</code></pre>

<p>定义好task之后，执行命令<code>gulp lint</code>就可以看到检查结果：</p>

<p><img src="/images/img_for_gulp/error-right.png" alt="" /></p>

<p>从图中可以看到jslint帮我们找到了很多代码中的格式错误，等修复了这些错误之后，重新执行<code>gulp lint</code>命令，就不会报错了：</p>

<p><img src="/images/img_for_gulp/noerror.png" alt="" /></p>

<p>如果我们需要在一个task中执行多个之前定义的task，则可以像下面这样做：</p>

<pre><code>gulp.task('build', ['test', 'lint', 'scripts', 'copy', 'views'], function () {
});
</code></pre>

<p>可以看到，在build命令中，我们执行了多个task，例如test，lint，scripts等。</p>

<p>类似的，Gulp还可以帮我们做很多事情，它有超过600种插件可以供开发者选择。你可以在<a href="http://gulpjs.com/plugins/">插件页面</a>或者npm上搜索gulpplugin来浏览插件列表，然后定义更多的task来简化我们的开发工作。</p>
]]></content>
  </entry>
  
</feed>
