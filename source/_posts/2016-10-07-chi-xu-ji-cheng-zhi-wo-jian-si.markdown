---
layout: post
title: "持续集成之我见（四）"
date: 2016-10-07 21:09:21 +0800
comments: true
categories: ci
---

##持续集成成熟度模型

前面的文章介绍了持续集成的概念、工具等，那么了解这些概念、使用了这些工具就算做到了持续集成吗？答案当然不是这样。我们将在这篇文章中通过持续集成成熟度模型来探讨这个问题。

成熟度模型分为五个级别：

* 入门（Base）：这个级别刚刚跟“模型”沾边，团队不再是所有的流程都要手动去操作。
* 新手（Beginner）：团队开始认真采用一些持续集成的实践，但是还在刚起步的水平。
* 中等（Intermediate）：实践已经成熟一些，能够减少错误，提高效率。
* 优化（Advanced）：团队已经远远超出同行业其他团队，而且效率非常高，能够预防错误的发生。
* 专家（Expert）：达到这个级别的要求，代价是非常昂贵的，但对某些团队来说，这是目标。

其考察维度有四个，分别是构建（Building），部署（Deploying），测试（Testing），和报告（Reporting）。下面我们将从这四个维度分别讨论成熟度模型。

###构建
以开发人员为中心的持续集成是为了从软件构建中快速得到反馈。但是当项目规模扩大后，构建管理和可控的构建流程就会变得至关重要。可控的构建流程规定了从源码检索到构建、打包、以及存储等的全过程。

在大多数项目的初始阶段，构建工作都是在开发机器上进行，程序员可以根据个人喜好使用IDE或者构建脚本。等项目成熟一些，构建工作就需要考虑测试，甚至发布等问题，这时候我们就开始需要一个成熟可控的构建过程。

* 入门：有明确的构建脚本；有专门的构建机器。（业界水平）
* 新手：能够自动化构建；至少每天晚上构建一次；能够保存生成的artifacts；
* 中等：每次提交代码后构建；有依赖管理仓库；
* 优化：构建过程控制；构建集群；（目标）
* 专家：虚拟机镜像构建；提交门禁；

成熟构建的第一阶段就是标准化构建过程，并且让构建有专门的机器。使用专门的机器构建意味着构建过程不会因为某个开发人员本地环境的变化而影响构建结果。构建不在开发者的机器上进行，意味着代码是从一个代码控制平台获得，并遵循一定的规则：比如每次获取每个分支的最新代码，或者打某种标签的代码。做到了这些，团队就达到了入门级。

新手级别是团队采取一定行动使得构建执行自动化，并且能够每天至少执行一次。构建服务器可以指挥机器按照规则pull源代码，并且执行构建脚本。

中等级别的团队的显著特征是开始进行依赖管理，包括对子项目的依赖和第三方库文件的依赖。团队使用依赖管理工具来追踪库文件，并且在构建时提供这些库文件，而不是将依赖放在代码库中。类似的，所依赖的子项目也是通过依赖管理工具管理和使用。构建过程会被保存（可能放在某网络服务器上，或是直接放在CI服务器上），打标签以便识别，并且定期做清理。到达这个级别，团队已经采取了持续构建，能在程序员提交代码后或者依赖变更后自己构建，并且提供有意义的反馈。一些大规模团队将使用分布式构建设备来并行处理数量众多的构建。

优化级别的团队将会关注对构建过程的控制，这种团队不光追踪代码和依赖的变化，也追踪构建过程的变化。对于构建过程的修改需要经过批准，因此登录到构建机器，修改构建服务器配置等操作都是被严格限制的。大规模的组织或者追求快速集成测试的组织往往需要优化级别的构建过程。随着每天构建次数的增加，或者构建环境的多样化（比如同时需要Windows设备和Linux设备），单独的构建设备就显得力不从心，我们就需要一个集群来自动选择构建集群并进行负载均衡。

专家级别要求团队必须能够完美地重新构建以前的发布版本。团队将使用各种各样的技术来确保每个环境的可重复性。为了运行构建过程，我们使用一些缜密的脚本，从安装操作系统开始准备构建机器，或者使用虚拟机镜像来运行版本化的构建过程。还有一些团队使用提交门禁制度使得build常绿，一旦某次提交使得构建失败，那么这次提交就会被reject掉。

###部署

部署是将软件发布给用户，或者其他消费者。对于web应用来说，部署意味着将应用安装到一系列的web服务器上，并且更新数据库或者其他静态服务器。

部署的最开始一般都是手工进行，像我的上个项目，程序员将本地的部署文件拷贝到目标机器上，然后手动进行替换和安装。手工过程往往非常慢，而且特别容易出错，为了发布新的软件，开发人员和测试人员往往需要整晚加班。很多软件都需要多环节部署，而且不同环境的部署方法和步骤往往不一样，更加增大了手工部署的难度，这时候，我们就要寻找更加快捷高效的方法。

* 入门：有少量部署脚本；（业界水平）
* 新手：自动部署到测试环境；有比较规范的部署；
* 中等：自动部署到测试和产品环境；在所有环境都有标准的流程；（目标）
* 优化：测试门禁部署；数据库的自动化部署；协调部署；
* 专家：持续部署到产品环境；

入门级别的团队能在部署时使用一些的辅助性脚本，相对于纯手工部署来说，这已经是很大的进步。目前来讲，大部分团队都会使用一些辅助部署脚本，达到入门级的水平。

新手级别的团队能够才测试环境实现的自动部署。通过一系列脚本的帮助，系统可以一键部署到一个或者所有测试环境。这将大大减少负责部署人员的工作量，也可以减少测试团队等待部署的时间。自动部署到第一个测试环境，是持续集成的部署维度达到新手水平的标志。根据团队情况，在不影响部署的情况下，部署工作应该发生在每一次成功构建之后，或者是以固定的间隔时间进行。新手级别的另一个标志是：在各个环境上建立标准化的部署流程。虽然部署中间还充满各种变数，但是在软件开发生命周期中，尽早的部署成功不但能增加团队信心，更能及早的发现问题，增加最终部署成功的几率。

中等级别的团队已经能够将关注点放在产品环境的部署。产品可以一键触发部署流程，然后自动部署到产品环境，并且相应的发布版本可以做到灾难恢复。那些已经将产品自动部署的测试环境的团队，应该把中等级别作为目标，如果在所有环境中进行完全一致的部署过程，那么在生产环境部署时，会极大地减少最后一刻失败的可能性。

优化级别的团队的特征是：将通过质量测试检验的版本全部自动地部署到部分或全部测试环境中。例如，得到测试经理的批准后，让某个构建版本自动地安装到压力测试环境中。另外，他们还攻克了一些部署过程的难题，比如数据库部署，向内容管理系统跟新信息，提升业务敏捷工具的报告。进阶团队的另一个典型特征是，协调部署。他们不是简单的部署一次构建的结果，而是部署一系列的有内在联系的一组构建，肯能是一个应用，或者一系列Web服务。这样有助于确保系统中的所有已经被测试的组件部署到同一组生产环境。将系统部署细化成一系列的组件部署。

专家级别的团队追求从完全没有任何人工干预的持续部署。也就是说，在构建完成得到一个新的版本后，依次自动部署到所有一系列的测试环境，然后经过所有的自动化测试后立即自动部署该版本到生产环境，而且整个系统必须具有自动回滚和严格的监控手段，对自动化测试的要求特别高。有些Web应用甚至可以做到一个小时内完成从源代码控制到发布的全过程。在竞争激烈的当今社会，快速的发布新功能，也可以增加企业的竞争力，减轻大规模发布的风险。

###测试

持续集成与自动化测试的层次息息相关。在很多企业中，自动化测试的重视程度很低，能力很弱，一个团队开发完一个产品，然后部署到测试环境，让测试人员进行手工测试，然后进行发布。测试人员几乎到淹没在无穷无尽的重复劳动中，特别疲惫，容易出错，而且只有发现问题的流程很长。如果团队在更加关注自动化测试，增加自动化测试脚本，他们就能很快发现问题或缺陷，从而在生产率和信心方面都会有所增加。

* 入门：有少量自动化测试；（业界水平）
* 新手：每次构建都进行快速测试；测试失败及时通知；
* 中等：静态代码分析；具有每天至少执行一次得自动化功能测试；（目标）
* 优化：高测试覆盖率；安全扫描；基于风险的手工测试；
* 专家：100%测试覆盖率；

大多数团队或多或少都有一些自动化测试，也行是少量的单元测试，或者是一些保证基本功能的测试脚本。这些测试可以帮助我们及时，快速的发现产品的基本功能性问题。入门级别的团队基本处于这个水平，刚刚开始适应自动化测试。

新手级别的团队应该有一套在本次构建时都会自动运行的测试。这些测试保证了软件在任何时间都是可以工作的，能够极大的增加团队信心。任何一次测试失败，系统都应该及时通知开发团队，使得问题能够及时得到修复。测试失败及时通知开发团队，也是达到新手级别的一个标志。

中等级别的团队具备构建时快速测试的特征外，还是得自动化测试更加多样化。一个中级级别的团队不光需要具有快速的单元测试和手工测试，还需具有自动化的功能测试，而且使用一些持续集成工具进行静态代码扫描。静态代码扫描可能不是每天进行，但是必须周期性的进行，一旦代码扫描出现一些严重的代码质量问题，就必须要阻断构建过程，待修复后才能发布产品。

优化级别的团队以“完整测试”为标志，每种类型的测试都要尽其所能的提供最大的作用。单元测试能够覆盖系统中的所有复杂代码和逻辑部分，功能测试能够覆盖系统中所有的重要功能，当然边界测试和随机测试也是必不可少的。同时，还需要频繁的运行静态代码扫描，并补充那些以工具执行的运行时分析和安全分析来分析那些因测试不足或无法测试而遗漏的问题。为了产品的多环境运行，测试会被分配在多种系统下运行，以提供快速的反馈。达到优化级别需要团队付出相当大的投入，但是这些投入对团队来说特别有意义，尤其对那些缺陷的成本很高且需要保持高速前进的团队来说。假如没有这些需求，一般达到中等级别已经能够满足要求。

专家级别团队的典型特征是追求100%的测试覆盖率。尽管100%测试覆盖率的定义在不断变化，但是它反映出至少产品的每行代码都被测试覆盖到。但是，在实际工作中，往往存在一个收益减少点，一味的追求100%覆盖往往意味着浪费。对于这些团队来说，满足并保持100%的测试覆盖率可能也是一个自豪感与动力的源泉。对于进阶级团队来说，如果曾经发现的确错过了一些非常重要的测试的话，要求100%的测试覆盖也未尚不可。但对于大多数团队来说，完全不需要刻意达到这个要求。

###报告

报告对持续集成至关重要，它应该包括软件质量、软件内容、以及持续集成过程的相关信息。如果产生的信息无序且繁杂，我们就无法提取有用信息，那么对于软件质量的提高也没有什么作用。所以越成熟的团队，信息的可视化程度就越高，用户越容易从中得到有用信息。

* 入门：工具生成报告；生成报告者可见；
* 新手：及时发布最近一次构建报告；团队可见；
* 中等：报告历史易追踪；报告互通性
* 优化：趋势分析报告；
* 专家：交叉分析

持续集成成熟度模型的四个方面大概就是这个样子，我们在实际使用时应该根据项目自身情况，选择适合自身项目的各个维度。
