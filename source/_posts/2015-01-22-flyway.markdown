---
layout: post
title: "使用Flyway管理数据库"
date: 2015-01-22 22:44:14 +0800
comments: true
categories: 
---

以前几乎没有自己好好弄过数据库相关的东西，除了照猫画虎的改过几个表结构，几乎还是一窍不通。今天在组里的workshop上需要从零开始搭建各种环境，跟着组里人学了学使用Flyway来管理数据库。据说它是一个很高大上的数据库管理工具，不过具体高大上在哪里我这只菜鸟还不是很清楚，先来梳理一下它在我们workshop中的用法吧。

##**讨厌的配置**

首先当然是进行一堆乱七八糟的配置，是我最讨厌的东西，可是没有办法，必经之路。我们的工程使用maven作为构建工具，所以需要在pom.xml文件中加入flywaydb的插件：

```xml
<plugin>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-maven-plugin</artifactId>
    <version>3.1</version>
    <configuration>
        ....
    </configuration>
</plugin>
```
这段代码描述了该插件的名字，版本号，以及一些flyway的配置。配置flyway的方式有很多种，我们可以像下面这样pom.xml里面配置：

```
<plugin>
    ...
    <configuration>
        <user>myUser</user>
        <password>mySecretPwd</password>
        <schemas>
            <schema>schema1</schema>
            <schema>schema2</schema>
            <schema>schema3</schema>
        </schemas>
        <placeholders>
            <keyABC>valueXYZ</keyABC>
            <otherplaceholder>value123</otherplaceholder>
        </placeholders>
    </configuration>
</plugin>
```
也可以通过一个外部的配置文件来配置：

```
flyway.user=myUser
flyway.password=mySecretPwd
flyway.schemas=schema1,schema2,schema3
flyway.placeholders.keyABC=valueXYZ
flyway.placeholders.otherplaceholder=value123
```
然后执行mvn时通过指定参数`flyway.configFile`的值来指定配置文件：

```
mvn -Dflyway.configFile=myConfig.properties
```
默认的`flyway.properties`文件和pom.xml在相同的路径下。

另外还可以通过其他方式来指定flyway的配置参数，具体信息可以参加其与maven集成的[相关文档](http://flywaydb.org/documentation/maven/)。

我们的工程中使用外部配置文件的方式进行配置，目前的配置文件如下所示：

```
flyway.user=wjia
flyway.password=
flyway.driver=org.postgresql.Driver
flyway.url=jdbc:postgresql://localhost:5432/wjia
flyway.locations=classpath:db/migration
flyway.sqlMigrationPrefix=V
flyway.sqlMigrationSeparator=__
flyway.sqlMigrationSuffix>=.sql
flyway.encoding=ISO-8859-1
#flyway.baselineVersion=2
```

可以看出，文件中指定了user，password，driver，url等用来连接数据库的信息。其中`flyway.locations`指定了sql文件的位置，`flyway.sqlMigrationPrefix`,
`flyway.sqlMigrationSeparator`,`flyway.sqlMigrationSuffix`共同指定了sql文件的命名方式，我们指定的命名方式是以V开头，__作为间隔符，.sql结尾。flyway有一些默认的命名的命名方式，如果不符合规定会造成操作的失败。

##**建sql吧**

讨厌的配置完成之后，当然是开始建立数据库迁移任务了，依照上面配置文件中指定的文件路径和命名规则，我们在classpath（resources目录）下的db.migration目录中定义sql文件。例如，我们可以简单的建立一张数据表，然后在表中添加几条记录。

这样resources里面的工程目录就是这样的：

```
└──resources
	└──db.migration
		└──V1__Create_guest_table.sql
		└──V2__Add_guest.sql
```
在classpath下的db.migration目录下有两个简单的sql文件。文件内容分别如下：

```
create table Guest (
	id integer constraint pk PRIMARY KEY,
	name varchar(40) not null,
	signingDate date
);
create SEQUENCE guest_id_generator START 10000;
```

```
insert into Guest (ID, NAME,signingDate) values (1, 'Axel', '2015-1-19');
insert into Guest (ID, NAME,signingDate) values (2, 'Mr. Foo','2015-1-19');
insert into Guest (ID, NAME,signingDate) values (3, 'Ms. Bar','2015-1-19');
```

至此我们就有了flyway的配置文件和数据库迁移任务文件，下面就到了flyway发挥作用的时候，看它如何帮助我们来管理数据库吧。

##**看flyway如何管理数据库**

####**Migrate**

flyway的最重要的功能当然是完成数据库迁移了，使用`mvn flyway:migrate`命令就可以方便的帮助我们执行`flyway.locations`目录中定义的migration任务。由于我们的使用了外部的flyway配置文件，因此在执行migration任务时需要加上参数`flyway.properties`来指定配置文件的位置。所以，在我们的工程中需要执行的任务为：

```
mvn flyway:migrate -Dflyway.configFile=localPath/flyway.properties
```	
其中`localPath/`为`flyway.properties`文件在本地的路径。执行完该任务后,就生成了我们需要的guest表，并生成了三条数据。查询数据库，可以得到以下表结构和数据：

![](/images/img_for_flyway/table.jpg)

####**Clean**

如果我们想初始化数据库，删除所有的表和数据，那么只需要执行命令：

```
mvn flyway:clean
```

####**Info**

如果我们想知道所有migration的详细信息，可以通过执行下面命令来打印信息：

```
mvn flyway:info
```
执行之后，Terminal中会打印出所有migration的详细信息，其中包括版本号，描述，执行时间，以及状态，具体信息如下图所示：

![](/images/img_for_flyway/info.jpg)

####**更多命令**

flyway还提供了更多命令来帮助我们管理数据库。例如：

```
mvn flyway:validate
```
用来validate已经执行的migration任务。

```
mvn flyway:baseline
```
用来回滚数据库到一个配置文件中设定好的baseline。

```
mvn flyway:repair
```
用来删除执行失败的migration任务。

更多关于flyway的详细用法，请参见其[官方文档](http://flywaydb.org/documentation/)。




